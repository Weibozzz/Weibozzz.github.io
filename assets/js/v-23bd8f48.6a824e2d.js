"use strict";(self.webpackChunkweiboqianduan=self.webpackChunkweiboqianduan||[]).push([[9237],{3794:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-23bd8f48",path:"/JS/newFeatures/%E6%96%B0%E7%89%B9%E6%80%A7proxy-%E7%AE%A1%E9%81%93%E6%93%8D%E4%BD%9C%E7%AC%A6.html",title:"新特性proxy-管道操作符",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"管道操作符",slug:"管道操作符",children:[{level:3,title:"语法",slug:"语法",children:[]},{level:3,title:"例子",slug:"例子",children:[]}]},{level:2,title:"Proxy",slug:"proxy",children:[{level:3,title:"语法",slug:"语法-1",children:[]},{level:3,title:"示例",slug:"示例",children:[]}]},{level:2,title:"摘自",slug:"摘自",children:[]},{level:2,title:"今日图 - 詹姆斯和史蒂芬森相爱相杀",slug:"今日图-詹姆斯和史蒂芬森相爱相杀",children:[]}],filePathRelative:"JS/newFeatures/新特性proxy-管道操作符.md",git:{updatedTime:1627026748e3}}},2607:(n,s,a)=>{a.r(s),a.d(s,{default:()=>b});var p=a(6252);const e=a.p+"assets/img/rereere.b646e563.gif",t=(0,p.uE)('<h1 id="新特性proxy-管道操作符"><a class="header-anchor" href="#新特性proxy-管道操作符">#</a> 新特性proxy-管道操作符</h1><h2 id="管道操作符"><a class="header-anchor" href="#管道操作符">#</a> 管道操作符</h2><blockquote><p>试验性的管道操作符 |&gt; （目前其标准化流程处于 stage 1 阶段）</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">&quot;!&quot;</span> <span class="token operator">|</span><span class="token operator">&gt;</span> decodeURI<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>使用传统语法写的话，等效的代码是这样的：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="语法"><a class="header-anchor" href="#语法">#</a> 语法</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>expression <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token keyword">function</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="例子"><a class="header-anchor" href="#例子">#</a> 例子</h3><p>函数链式调用节 当链式调用多个函数时，使用管道操作符可以改善代码的可读性。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n   <span class="token number">1</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 没有用管道操作符</span>\n<span class="token function">double</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22</span>\n\n<span class="token comment">// 用上管道操作符之后</span>\n<span class="token number">5</span> <span class="token operator">|</span><span class="token operator">&gt;</span> double <span class="token operator">|</span><span class="token operator">&gt;</span> increment <span class="token operator">|</span><span class="token operator">&gt;</span> double<span class="token punctuation">;</span> <span class="token comment">// 22</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="proxy"><a class="header-anchor" href="#proxy">#</a> Proxy</h2><blockquote><p>Proxy 对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）</p></blockquote><h3 id="语法-1"><a class="header-anchor" href="#语法-1">#</a> 语法</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>target 用Proxy包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</li><li>handler 一个对象，其属性是当执行一个操作时定义代理的行为的函数。</li></ul><p><strong>方法</strong></p><p><code>Proxy.revocable()</code> 创建一个可撤销的Proxy对象。</p><h3 id="示例"><a class="header-anchor" href="#示例">#</a> 示例</h3><h4 id="基础示例"><a class="header-anchor" href="#基础示例">#</a> 基础示例</h4><p>在以下简单的例子中，当对象中不存在属性名时，缺省返回数为37。例子中使用了 get。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> name <span class="token keyword">in</span> target <span class="token operator">?</span> target<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">37</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\np<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\np<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>a<span class="token punctuation">,</span> p<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1, undefined</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span> <span class="token keyword">in</span> p<span class="token punctuation">,</span> p<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// false, 37</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="验证"><a class="header-anchor" href="#验证">#</a> 验证</h4><p>通过代理，你可以轻松地验证向一个对象的传值。这个例子使用了 set。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> validator <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop <span class="token operator">===</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;The age is not an integer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RangeError</span><span class="token punctuation">(</span><span class="token string">&#39;The age seems invalid&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// The default behavior to store the value</span>\n    obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> validator<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nperson<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 100</span>\n\nperson<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">&#39;young&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// 抛出异常: Uncaught TypeError: The age is not an integer</span>\n\nperson<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>\n<span class="token comment">// 抛出异常: Uncaught RangeError: The age seems invalid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="摘自"><a class="header-anchor" href="#摘自">#</a> 摘自</h2>',26),o={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/%E7%AE%A1%E9%81%93%E6%93%8D%E4%BD%9C%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("管道操作符-MDN"),l={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("Proxy-MDN"),u=(0,p._)("h2",{id:"今日图-詹姆斯和史蒂芬森相爱相杀"},[(0,p._)("a",{class:"header-anchor",href:"#今日图-詹姆斯和史蒂芬森相爱相杀"},"#"),(0,p.Uk)(" 今日图 - 詹姆斯和史蒂芬森相爱相杀")],-1),i=(0,p._)("p",null,[(0,p._)("img",{src:e,alt:"rereere.gif"})],-1),k={},b=(0,a(3744).Z)(k,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",o,[c,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",l,[r,(0,p.Wm)(a)])])]),u,i],64)}]])}}]);