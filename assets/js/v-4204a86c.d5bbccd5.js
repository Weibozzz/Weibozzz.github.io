(self.webpackChunkweiboqianduan=self.webpackChunkweiboqianduan||[]).push([[7855],{7492:(n,a,s)=>{"use strict";s.r(a),s.d(a,{data:()=>p});const p={key:"v-4204a86c",path:"/JS/%E7%B2%BE%E7%AE%80js%E5%B0%8F%E6%8A%80%E5%B7%A7.html",title:"精简js小技巧",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"代码块",slug:"代码块",children:[{level:3,title:"1. 全屏",slug:"_1-全屏",children:[]},{level:3,title:"2. 返回数组中的最大值",slug:"_2-返回数组中的最大值",children:[]},{level:3,title:"3. 返回数组中的最小值",slug:"_3-返回数组中的最小值",children:[]},{level:3,title:"4. chunk 将数组块划分为指定大小的较小数组",slug:"_4-chunk-将数组块划分为指定大小的较小数组",children:[]},{level:3,title:"5. compact 从数组中移除 falsey 值",slug:"_5-compact-从数组中移除-falsey-值",children:[]},{level:3,title:"6. countOccurrences 计算数组中值的出现次数",slug:"_6-countoccurrences-计算数组中值的出现次数",children:[]},{level:3,title:"7. deepFlatten 深拼合数组",slug:"_7-deepflatten-深拼合数组",children:[]},{level:3,title:"8. difference 返回两个数组之间的差异",slug:"_8-difference-返回两个数组之间的差异",children:[]},{level:3,title:"9. distinctValuesOfArray 返回数组的所有不同值",slug:"_9-distinctvaluesofarray-返回数组的所有不同值",children:[]},{level:3,title:"10. dropElements",slug:"_10-dropelements",children:[]},{level:3,title:"11. everyNth 返回数组中的每个第 n 个元素",slug:"_11-everynth-返回数组中的每个第-n-个元素",children:[]},{level:3,title:"12. filterNonUnique 筛选出数组中的非唯一值",slug:"_12-filternonunique-筛选出数组中的非唯一值",children:[]},{level:3,title:"13. flatten 拼合数组",slug:"_13-flatten-拼合数组",children:[]},{level:3,title:"14. flattenDepth 将数组向上拼合到指定深度",slug:"_14-flattendepth-将数组向上拼合到指定深度",children:[]},{level:3,title:"15. groupby 根据给定函数对数组元素进行分组",slug:"_15-groupby-根据给定函数对数组元素进行分组",children:[]},{level:3,title:"16. initial 返回除最后一个数组之外的所有元素",slug:"_16-initial-返回除最后一个数组之外的所有元素",children:[]},{level:3,title:"17. initializeArrayWithRange 初始化包含指定范围内的数字的数组",slug:"_17-initializearraywithrange-初始化包含指定范围内的数字的数组",children:[]},{level:3,title:"18. initializeArrayWithValues 初始化并填充具有指定值的数组",slug:"_18-initializearraywithvalues-初始化并填充具有指定值的数组",children:[]},{level:3,title:"19. intersection 返回两个数组中存在的元素的列表",slug:"_19-intersection-返回两个数组中存在的元素的列表",children:[]},{level:3,title:"20. sample 返回数组中的随机元素",slug:"_20-sample-返回数组中的随机元素",children:[]},{level:3,title:"21. shuffle 随机数组值的顺序",slug:"_21-shuffle-随机数组值的顺序",children:[]},{level:3,title:"22. similarity 返回两个数组中都显示的元素的数组",slug:"_22-similarity-返回两个数组中都显示的元素的数组",children:[]},{level:3,title:"23. symmetricDifference 返回两个数组之间的对称差",slug:"_23-symmetricdifference-返回两个数组之间的对称差",children:[]},{level:3,title:"24. bottomVisible 底部可见",slug:"_24-bottomvisible-底部可见",children:[]},{level:3,title:"25. getScrollPosition 返回当前页的滚动位置",slug:"_25-getscrollposition-返回当前页的滚动位置",children:[]},{level:3,title:"26. getURLParameters 返回一个包含当前 URL 参数的对象",slug:"_26-geturlparameters-返回一个包含当前-url-参数的对象",children:[]},{level:3,title:"27. scrollToTop 平滑滚动到页面顶部",slug:"_27-scrolltotop-平滑滚动到页面顶部",children:[]},{level:3,title:"28. capitalizeEveryWord 将字符串中每个单词的首字母大写",slug:"_28-capitalizeeveryword-将字符串中每个单词的首字母大写",children:[]},{level:3,title:"29. escapeRegExp 转义要在正则表达式中使用的字符串",slug:"_29-escaperegexp-转义要在正则表达式中使用的字符串",children:[]}]},{level:2,title:"更多",slug:"更多",children:[]}],filePathRelative:"JS/精简js小技巧.md",git:{updatedTime:1650786891e3}}},5586:(n,a,s)=>{"use strict";s.r(a),s.d(a,{default:()=>t});const p=(0,s(6252).uE)('<h1 id="精简js小技巧" tabindex="-1"><a class="header-anchor" href="#精简js小技巧" aria-hidden="true">#</a> 精简js小技巧</h1><blockquote><p>下班早小技巧</p></blockquote><h2 id="代码块" tabindex="-1"><a class="header-anchor" href="#代码块" aria-hidden="true">#</a> 代码块</h2><h3 id="_1-全屏" tabindex="-1"><a class="header-anchor" href="#_1-全屏" aria-hidden="true">#</a> 1. 全屏</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fullscreen <span class="token operator">=</span> <span class="token punctuation">(</span>mode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> el <span class="token operator">=</span> <span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  mode\n    <span class="token operator">?</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">exitFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">fullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Opens `body` in fullscreen mode</span>\n<span class="token function">fullscreen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Exits fullscreen mode</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-返回数组中的最大值" tabindex="-1"><a class="header-anchor" href="#_2-返回数组中的最大值" aria-hidden="true">#</a> 2. 返回数组中的最大值</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 将Math.max()与扩展运算符 (…) 结合使用以获取数组中的最大值。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">arrayMax</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// arrayMax([10, 1, 5]) -&gt; 10</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-返回数组中的最小值" tabindex="-1"><a class="header-anchor" href="#_3-返回数组中的最小值" aria-hidden="true">#</a> 3. 返回数组中的最小值</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 将Math.min()与扩展运算符 (…) 结合使用以获取数组中的最小值。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">arrayMin</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// arrayMin([10, 1, 5]) -&gt; 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_4-chunk-将数组块划分为指定大小的较小数组" tabindex="-1"><a class="header-anchor" href="#_4-chunk-将数组块划分为指定大小的较小数组" aria-hidden="true">#</a> 4. chunk 将数组块划分为指定大小的较小数组</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 将数组块划分为指定大小的较小数组。</span>\n\n<span class="token comment">// 使用Array.from()创建新的数组, 这符合将生成的区块数。使用Array.slice()将新数组的每个元素映射到size长度的区块。如果原始数组不能均匀拆分, 则最终的块将包含剩余的元素。</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">chunk</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\nArray<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> size<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">*</span> size<span class="token punctuation">,</span> i <span class="token operator">*</span> size <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// chunk([1,2,3,4,5], 2) -&gt; [[1,2],[3,4],[5]]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_5-compact-从数组中移除-falsey-值" tabindex="-1"><a class="header-anchor" href="#_5-compact-从数组中移除-falsey-值" aria-hidden="true">#</a> 5. compact 从数组中移除 falsey 值</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用Array.filter()筛选出 falsey 值 (false、null、0、””、undefined和NaN).</span>\n<span class="token keyword">const</span> <span class="token function-variable function">compact</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// compact([0, 1, false, 2, &#39;&#39;, 3, &#39;a&#39;, &#39;e&#39;*23, NaN, &#39;s&#39;, 34]) -&gt; [ 1, 2, 3, &#39;a&#39;, &#39;s&#39;, 34 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_6-countoccurrences-计算数组中值的出现次数" tabindex="-1"><a class="header-anchor" href="#_6-countoccurrences-计算数组中值的出现次数" aria-hidden="true">#</a> 6. countOccurrences 计算数组中值的出现次数</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用Array.reduce()在每次遇到数组中的特定值时递增计数器。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">countOccurrences</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">===</span> value <span class="token operator">?</span> a <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> a <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// countOccurrences([1,1,2,1,2,3], 1) -&gt; 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_7-deepflatten-深拼合数组" tabindex="-1"><a class="header-anchor" href="#_7-deepflatten-深拼合数组" aria-hidden="true">#</a> 7. deepFlatten 深拼合数组</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用递归。使用Array.concat()与空数组 ([]) 和跨页运算符 (…) 来拼合数组。递归拼合作为数组的每个元素。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">deepFlatten</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">deepFlatten</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">:</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// deepFlatten([1,[2],[[3],4],5]) -&gt; [1,2,3,4,5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_8-difference-返回两个数组之间的差异" tabindex="-1"><a class="header-anchor" href="#_8-difference-返回两个数组之间的差异" aria-hidden="true">#</a> 8. difference 返回两个数组之间的差异</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 从b创建Set, 然后使用Array.filter() on 只保留a b中不包含的值.</span>\n<span class="token keyword">const</span> <span class="token function-variable function">difference</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// difference([1,2,3], [1,2,4]) -&gt; [3]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_9-distinctvaluesofarray-返回数组的所有不同值" tabindex="-1"><a class="header-anchor" href="#_9-distinctvaluesofarray-返回数组的所有不同值" aria-hidden="true">#</a> 9. distinctValuesOfArray 返回数组的所有不同值</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用 ES6 Set和…rest运算符放弃所有重复的值。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">distinctValuesOfArray</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// distinctValuesOfArray([1,2,2,3,4,4,5]) -&gt; [1,2,3,4,5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_10-dropelements" tabindex="-1"><a class="header-anchor" href="#_10-dropelements" aria-hidden="true">#</a> 10. dropElements</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 移除数组中的元素, 直到传递的函数返回true。返回数组中的其余元素。 在数组中循环, 使用Array.shift()将数组的第一个元素除去, 直到函数的返回值为true。返回其余元素。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">dropElements</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">func</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// dropElements([1, 2, 3, 4], n =&gt; n &gt;= 3) -&gt; [3,4]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_11-everynth-返回数组中的每个第-n-个元素" tabindex="-1"><a class="header-anchor" href="#_11-everynth-返回数组中的每个第-n-个元素" aria-hidden="true">#</a> 11. everyNth 返回数组中的每个第 n 个元素</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用Array.filter()创建一个包含给定数组的每个第 n 个元素的新数组。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">everyNth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> nth</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">%</span> nth <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// everyNth([1,2,3,4,5,6], 2) -&gt; [ 1, 3, 5 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_12-filternonunique-筛选出数组中的非唯一值" tabindex="-1"><a class="header-anchor" href="#_12-filternonunique-筛选出数组中的非唯一值" aria-hidden="true">#</a> 12. filterNonUnique 筛选出数组中的非唯一值</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 对于只包含唯一值的数组, 请使用Array.filter()。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">filterNonUnique</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">===</span> arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// filterNonUnique([1,2,2,3,4,4,5]) -&gt; [1,3,5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_13-flatten-拼合数组" tabindex="-1"><a class="header-anchor" href="#_13-flatten-拼合数组" aria-hidden="true">#</a> 13. flatten 拼合数组</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用Array.reduce()获取数组中的所有元素和concat()以拼合它们。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">flatten</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// flatten([1,[2],3,4]) -&gt; [1,2,3,4]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_14-flattendepth-将数组向上拼合到指定深度" tabindex="-1"><a class="header-anchor" href="#_14-flattendepth-将数组向上拼合到指定深度" aria-hidden="true">#</a> 14. flattenDepth 将数组向上拼合到指定深度</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用递归, 递减depth, 每层深度为1。使用Array.reduce()和Array.concat()来合并元素或数组。基本情况下, 对于等于1的depth停止递归。省略第二个元素,depth仅拼合到1的深度 (单个拼合)。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">flattenDepth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> depth <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\ndepth <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">?</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flattenDepth</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> depth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token operator">:</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// flattenDepth([1,[2],[[[3],4],5]], 2) -&gt; [1,2,[3],4,5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_15-groupby-根据给定函数对数组元素进行分组" tabindex="-1"><a class="header-anchor" href="#_15-groupby-根据给定函数对数组元素进行分组" aria-hidden="true">#</a> 15. groupby 根据给定函数对数组元素进行分组</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用Array.map()将数组的值映射到函数或属性名。使用Array.reduce()创建一个对象, 其中的键是从映射的结果生成的。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">groupBy</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\narr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> func <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function-variable function">func</span> <span class="token operator">:</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> val<span class="token punctuation">[</span>func<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> val<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> acc<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>acc<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> acc<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// groupBy([6.1, 4.2, 6.3], Math.floor) -&gt; {4: [4.2], 6: [6.1, 6.3]}</span>\n<span class="token comment">// groupBy([&#39;one&#39;, &#39;two&#39;, &#39;three&#39;], &#39;length&#39;) -&gt; {3: [&#39;one&#39;, &#39;two&#39;], 5: [&#39;three&#39;]}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_16-initial-返回除最后一个数组之外的所有元素" tabindex="-1"><a class="header-anchor" href="#_16-initial-返回除最后一个数组之外的所有元素" aria-hidden="true">#</a> 16. initial 返回除最后一个数组之外的所有元素</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用 “arr.slice(0,-1)” 返回数组的最后一个元素,也可以为-2 -3等。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">initial</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// initial([1,2,3]) -&gt; [1,2]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_17-initializearraywithrange-初始化包含指定范围内的数字的数组" tabindex="-1"><a class="header-anchor" href="#_17-initializearraywithrange-初始化包含指定范围内的数字的数组" aria-hidden="true">#</a> 17. initializeArrayWithRange 初始化包含指定范围内的数字的数组</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用Array(end-start)创建所需长度的数组Array.map()以填充区域中所需的值。可以省略start以使用默认值0.</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">initializeArrayWithRange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">end<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> end <span class="token operator">-</span> start <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">+</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// initializeArrayWithRange(5) -&gt; [0,1,2,3,4]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_18-initializearraywithvalues-初始化并填充具有指定值的数组" tabindex="-1"><a class="header-anchor" href="#_18-initializearraywithvalues-初始化并填充具有指定值的数组" aria-hidden="true">#</a> 18. initializeArrayWithValues 初始化并填充具有指定值的数组</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用Array(n)创建所需长度的数组,fill(v)以填充所需的值。可以省略value以使用默认值0.</span>\n<span class="token keyword">const</span> <span class="token function-variable function">initializeArrayWithValues</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// initializeArrayWithValues(5, 2) -&gt; [2,2,2,2,2]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_19-intersection-返回两个数组中存在的元素的列表" tabindex="-1"><a class="header-anchor" href="#_19-intersection-返回两个数组中存在的元素的列表" aria-hidden="true">#</a> 19. intersection 返回两个数组中存在的元素的列表</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 从b创建Set, 然后使用Array.filter()on a只保留b中包含的值.</span>\n<span class="token keyword">const</span> <span class="token function-variable function">intersection</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// intersection([1,2,3], [4,3,2]) -&gt; [2,3]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_20-sample-返回数组中的随机元素" tabindex="-1"><a class="header-anchor" href="#_20-sample-返回数组中的随机元素" aria-hidden="true">#</a> 20. sample 返回数组中的随机元素</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用Math.random()生成一个随机数, 将它与length相乘, 并使用数学将其舍入到最接近的整数Math.floor()。此方法也适用于字符串。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">sample</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// sample([3, 7, 9, 11]) -&gt; 9</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_21-shuffle-随机数组值的顺序" tabindex="-1"><a class="header-anchor" href="#_21-shuffle-随机数组值的顺序" aria-hidden="true">#</a> 21. shuffle 随机数组值的顺序</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用Array.sort()可在比较器中使用Math.random()重新排序元素。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">shuffle</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// shuffle([1,2,3]) -&gt; [2,3,1]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_22-similarity-返回两个数组中都显示的元素的数组" tabindex="-1"><a class="header-anchor" href="#_22-similarity-返回两个数组中都显示的元素的数组" aria-hidden="true">#</a> 22. similarity 返回两个数组中都显示的元素的数组</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用filter()可删除不属于values的值, 使用includes()确定.</span>\n<span class="token keyword">const</span> <span class="token function-variable function">similarity</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> values</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> values<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// similarity([1,2,3], [1,2,4]) -&gt; [1,2]</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_23-symmetricdifference-返回两个数组之间的对称差" tabindex="-1"><a class="header-anchor" href="#_23-symmetricdifference-返回两个数组之间的对称差" aria-hidden="true">#</a> 23. symmetricDifference 返回两个数组之间的对称差</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 从每个数组创建一个Set, 然后对它们中的每一个都使用Array.filter(), 以便只保留其他值中不包含的数值。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">symmetricDifference</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n<span class="token keyword">const</span> sA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> sB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>sB<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>sA<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// symmetricDifference([1,2,3], [1,2,4]) -&gt; [3,4]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_24-bottomvisible-底部可见" tabindex="-1"><a class="header-anchor" href="#_24-bottomvisible-底部可见" aria-hidden="true">#</a> 24. bottomVisible 底部可见</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 如果页的底部可见, 则返回true, 否则为false。</span>\n<span class="token comment">// 使用scrollY、scrollHeight和clientHeight来确定页面底部是否可见。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">bottomVisible</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\ndocument<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">+</span> window<span class="token punctuation">.</span>scrollY <span class="token operator">&gt;=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>\n<span class="token comment">// bottomVisible() -&gt; true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_25-getscrollposition-返回当前页的滚动位置" tabindex="-1"><a class="header-anchor" href="#_25-getscrollposition-返回当前页的滚动位置" aria-hidden="true">#</a> 25. getScrollPosition 返回当前页的滚动位置</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 如果已定义, 则使用pageXOffset和pageYOffset, 否则scrollLeft和scrollTop。可以省略el以使用window的默认值.</span>\n<span class="token keyword">const</span> <span class="token function-variable function">getScrollPosition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el <span class="token operator">=</span> window</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n<span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">:</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>pageXOffset <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">?</span> el<span class="token punctuation">.</span>pageXOffset <span class="token operator">:</span> el<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">,</span>\ny<span class="token operator">:</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>pageYOffset <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">?</span> el<span class="token punctuation">.</span>pageYOffset <span class="token operator">:</span> el<span class="token punctuation">.</span>scrollTop<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// getScrollPosition() -&gt; {x: 0, y: 200}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_26-geturlparameters-返回一个包含当前-url-参数的对象" tabindex="-1"><a class="header-anchor" href="#_26-geturlparameters-返回一个包含当前-url-参数的对象" aria-hidden="true">#</a> 26. getURLParameters 返回一个包含当前 URL 参数的对象</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用match()与适当的正则表达式来获取所有键值对,Array.reduce()可将它们映射并合并到单个对象中。将location.search作为要应用于当前url的参数传递.</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">getURLParameters</span> <span class="token operator">=</span> <span class="token parameter">url</span> <span class="token operator">=&gt;</span>\nurl<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([^?=&amp;]+)(=([^&amp;]*))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>\n<span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>v<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// getURLParameters(&#39;http://url.com/page?name=Adam&amp;surname=Smith&#39;) -&gt; {name: &#39;Adam&#39;, surname: &#39;Smith&#39;}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_27-scrolltotop-平滑滚动到页面顶部" tabindex="-1"><a class="header-anchor" href="#_27-scrolltotop-平滑滚动到页面顶部" aria-hidden="true">#</a> 27. scrollToTop 平滑滚动到页面顶部</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用document.documentElement.scrollTop或document.body.scrollTop从顶部获取距离。从顶部的距离的一小部分滚动。使用window.requestAnimationFrame()对滚动进行动画处理。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">scrollToTop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\nwindow<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>scrollToTop<span class="token punctuation">)</span><span class="token punctuation">;</span>\nwindow<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> c <span class="token operator">-</span> c <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_28-capitalizeeveryword-将字符串中每个单词的首字母大写" tabindex="-1"><a class="header-anchor" href="#_28-capitalizeeveryword-将字符串中每个单词的首字母大写" aria-hidden="true">#</a> 28. capitalizeEveryWord 将字符串中每个单词的首字母大写</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用replace()匹配每个单词和toUpperCase()的第一个字符以将其大写。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">capitalizeEveryWord</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token parameter">char</span> <span class="token operator">=&gt;</span> char<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// capitalizeEveryWord(&#39;hello world!&#39;) -&gt; &#39;Hello World!&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_29-escaperegexp-转义要在正则表达式中使用的字符串" tabindex="-1"><a class="header-anchor" href="#_29-escaperegexp-转义要在正则表达式中使用的字符串" aria-hidden="true">#</a> 29. escapeRegExp 转义要在正则表达式中使用的字符串</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用replace()可转义特殊字符。</span>\n<span class="token keyword">const</span> <span class="token function-variable function">escapeRegExp</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[.*+?^${}()|[\\]\\\\]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\$&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// escapeRegExp(&#39;(test)&#39;) -&gt; \\\\(test\\\\)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="更多" tabindex="-1"><a class="header-anchor" href="#更多" aria-hidden="true">#</a> 更多</h2><ul><li>https://github.com/30-seconds/30-seconds-of-code/blob/master/snippets/fullscreen.md</li></ul>',63),t={render:function(n,a){return p}}}}]);