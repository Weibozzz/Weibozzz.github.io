"use strict";(self.webpackChunkweiboqianduan=self.webpackChunkweiboqianduan||[]).push([[4429],{9409:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-05b8f41b",path:"/CodeHobby/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html",title:"前端性能优化",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"页面渲染（js单线程，原因避免dom渲染冲突）",slug:"页面渲染-js单线程-原因避免dom渲染冲突",children:[]},{level:2,title:"dom操作",slug:"dom操作",children:[]},{level:2,title:"页面性能",slug:"页面性能",children:[]},{level:2,title:"错误监控",slug:"错误监控",children:[]},{level:2,title:"performance.timing：利用performance.timing进行性能分析",slug:"performance-timing-利用performance-timing进行性能分析",children:[]},{level:2,title:"摘自",slug:"摘自",children:[]},{level:2,title:"今日图 性能的重要性",slug:"今日图-性能的重要性",children:[]}],filePathRelative:"CodeHobby/前端性能优化.md",git:{updatedTime:1627026748e3}}},6339:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var t=a(6252);const p=a.p+"assets/img/ewewwe.3e67868c.gif",o=(0,t.uE)('<h1 id="前端性能优化" tabindex="-1"><a class="header-anchor" href="#前端性能优化" aria-hidden="true">#</a> 前端性能优化</h1><h2 id="页面渲染-js单线程-原因避免dom渲染冲突" tabindex="-1"><a class="header-anchor" href="#页面渲染-js单线程-原因避免dom渲染冲突" aria-hidden="true">#</a> 页面渲染（js单线程，原因避免dom渲染冲突）</h2><ol><li>DOCTYPE作用 <ul><li>HTML5 &lt;！DOCTYPE html&gt;</li><li>HTML4.01 Strict(严格模式)，不包含弃用的元素(font标签)</li><li>HTML4.01Transitional（传统模式）包含弃用的元素(font标签)</li></ul></li><li>浏览器渲染过程</li><li>重绘重排</li></ol><h2 id="dom操作" tabindex="-1"><a class="header-anchor" href="#dom操作" aria-hidden="true">#</a> dom操作</h2><ol><li>缓存daom</li><li>暂存dom</li><li>事件节流</li><li>尽早操作 <code>load</code> <code>DOMContentLoaded</code></li></ol><h2 id="页面性能" tabindex="-1"><a class="header-anchor" href="#页面性能" aria-hidden="true">#</a> 页面性能</h2><ol><li><p>资源合并压缩</p></li><li><p>非核心代码异步加载</p><ol><li>动态脚本加载</li><li>defer,在html解析完成后才会执行，如果是多个安装顺序依次执行</li><li>async，加载完成后立即执行，如果是多个，执行顺序与加载顺序无关</li></ol></li><li><p>利用浏览器缓存</p><ol><li><p>强缓存</p><ul><li><code>expires</code> Http1.0 中的标准，表明过期时间，注意此处的时间都是指的是服务器的时间。可以看到过期时间被设定为了：<code>Thu, 28 Sep 2017 06:38:37</code> GMT存在的问题：服务器时间与客户端时间的不一致，就会导致缓存跟期待效果出现偏差。</li><li><code>Cache-Control</code> Http1.1 中的标准，可以看成是 expires 的补充。使用的是相对时间的概念。简单介绍下Cache-Control的属性设置。</li><li><code>max-age</code>: 设置缓存的最大的有效时间，单位为秒（s）。max-age会覆盖掉Expires</li></ul></li><li><p>协商缓存</p><p>在这个阶段，服务器一般会将<code>Cache-control</code>、<code>expires</code> 、<code>last-modified</code>、<code>date</code>、<code>etag</code> (hash值)等字段在response header 中返回，便于下次缓存。当然具体的场景，也是看服务器的约定规则设定。</p></li></ol></li><li><p>使用CDN</p></li><li><p>cdn预解析</p></li></ol><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>x-dns-prefetch-control<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>on<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>   //页面中的a标签一般会自动预解析，若是https协议，默认关闭dns预解析，这里强制预解析\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://bdimg.share.baidu.com<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="错误监控" tabindex="-1"><a class="header-anchor" href="#错误监控" aria-hidden="true">#</a> 错误监控</h2><p>js中共有6种错误类型</p><ol><li><p>SyntaxError 语法错误</p></li><li><p>ReferenceError 引用错误</p></li><li><p>TypeError 类型错误</p></li><li><p>RangeError 范围错误 参数超范围</p></li><li><p>EvalError</p></li><li><p>URIError</p></li><li><p>错误分类</p><ul><li><p>及时运行错误：代码错误</p><p><code>try...catch</code> <code>window.onerror</code></p></li><li><p>资源加载错误（不会冒泡）</p><ol><li><code>object.onerror</code></li><li><code>performance.getEntries() </code> (获得页面所有加载的资源，根据已经加载的资源间接判断加载失败的资源)</li><li><code>Error事件捕获</code></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>\n    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;捕获&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里一定是true表示要捕获</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>跨域的js能捕获到错误</p><ul><li>错误信息：script:error</li><li>出错行号和出错列拿不到为0</li><li>解决： <ol><li>第一步，在客户端<code>script</code>增加<code>crossorign</code>属性</li><li>第二步，在服务端设置js响应头<code>Access-Control-Allow-Orign:*</code>(或者指定域名)</li></ol></li></ul></li></ul></li><li><p>上报错误</p><ol><li><p>利用<code>ajax</code>通信进行上报</p></li><li><p>利用<code>image</code>对象上报（大多数都用这个,简单，不用借助其他的库，一行代码解决所有）</p><p><code>eg:(new Image()).src = &#39;http://baidu.com/tesjk?r=tksjk&#39;;</code></p></li></ol></li></ol><h2 id="performance-timing-利用performance-timing进行性能分析" tabindex="-1"><a class="header-anchor" href="#performance-timing-利用performance-timing进行性能分析" aria-hidden="true">#</a> performance.timing：利用performance.timing进行性能分析</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> t <span class="token operator">=</span> performance<span class="token punctuation">.</span>timing\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;DNS查询耗时 ：&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>domainLookupEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>domainLookupStart<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;TCP链接耗时 ：&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>connectEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>connectStart<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;request请求耗时 ：&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>responseEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>responseStart<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;解析dom树耗时 ：&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>domComplete <span class="token operator">-</span> t<span class="token punctuation">.</span>domInteractive<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;白屏时间 ：&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>responseStart <span class="token operator">-</span> t<span class="token punctuation">.</span>navigationStart<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;domready时间 ：&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>domContentLoadedEventEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>navigationStart<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;onload时间 ：&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>loadEventEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>navigationStart<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">=</span> performance<span class="token punctuation">.</span>memory<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;js内存使用占比 ：&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>usedJSHeapSize <span class="token operator">/</span> t<span class="token punctuation">.</span>totalJSHeapSize <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;%&#39;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="摘自" tabindex="-1"><a class="header-anchor" href="#摘自" aria-hidden="true">#</a> 摘自</h2>',14),e={href:"https://segmentfault.com/a/1190000019601333?_ea=15195481#articleHeader45",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("performance.timing"),l=(0,t._)("h2",{id:"今日图-性能的重要性",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#今日图-性能的重要性","aria-hidden":"true"},"#"),(0,t.Uk)(" 今日图 性能的重要性")],-1),i=(0,t._)("p",null,[(0,t._)("img",{src:p,alt:"ewewwe.gif"})],-1),u={},r=(0,a(3744).Z)(u,[["render",function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[o,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",e,[c,(0,t.Wm)(a)])])]),l,i],64)}]])}}]);