"use strict";(self.webpackChunkweiboqianduan=self.webpackChunkweiboqianduan||[]).push([[7152],{803:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-7baf1e38",path:"/JS/newFeatures/Iterator-Generate.html",title:"Iterator-Generate",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Iterator是什么，有什么作用？",slug:"iterator是什么-有什么作用",children:[]},{level:2,title:"Generator 函数是什么，有什么作用？",slug:"generator-函数是什么-有什么作用",children:[]}],filePathRelative:"JS/newFeatures/Iterator-Generate.md",git:{updatedTime:1630569898e3}}},736:(n,a,s)=>{s.r(a),s.d(a,{default:()=>c});var e=s(6252);const t=(0,e.uE)('<h1 id="iterator-generate" tabindex="-1"><a class="header-anchor" href="#iterator-generate" aria-hidden="true">#</a> Iterator-Generate</h1><h2 id="iterator是什么-有什么作用" tabindex="-1"><a class="header-anchor" href="#iterator是什么-有什么作用" aria-hidden="true">#</a> Iterator是什么，有什么作用？</h2><p>遍历器（<code>Iterator</code>）就是这样一种机制。它是一种接口，为 各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。 Iterator 的作用有三个：</p><ul><li>为各种数据结构，提供一个统一的、简便的访问接口；</li><li>使得数据结构的成员能够按某种次序排列；</li><li><code>ES6</code> 创造了一种新的遍历命令<code>for...of</code>循环，<code>Iterator</code> 接口主要供<code>for...of</code>消费。</li></ul><p>遍历过程：</p><ul><li>创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。</li><li>第一次调用指针对象的<code>next</code>方法，可以将指针指向数据结构的第一个成员。</li><li>第二次调用指针对象的<code>next</code>方法，指针就指向数据结构的第二个成员。</li><li>不断调用指针对象的<code>next</code>方法，直到它指向数据结构的结束位置。</li></ul><p>每一次调用<code>next</code>方法，都会返回数据结构的当前成员的信息。具体来 说，就是返回一个包含<code>value</code>和<code>done</code>两个属性的对象。其中，<code>value</code>属性是 当前成员的值，<code>done</code>属性是一个布尔值，表示遍历是否结束。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//obj就是可遍历的，因为它遵循了Iterator标准，且包含`[Symbol.iterator]`方法，方</span>\n<span class="token comment">// 法函数也符合标准的Iterator接口规范。</span>\n<span class="token comment">//obj.[Symbol.iterator]() 就是Iterator遍历器</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  data<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            value<span class="token operator">:</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            done<span class="token operator">:</span> <span class="token boolean">false</span>\n          <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="generator-函数是什么-有什么作用" tabindex="-1"><a class="header-anchor" href="#generator-函数是什么-有什么作用" aria-hidden="true">#</a> Generator 函数是什么，有什么作用？</h2><p>如果说 <code>JavaScrip</code> 是 <code>ECMAScript</code> 标准的一种具体实现、<code>Iterator</code>遍历器是 Iterator的具体实现， 那么Generator函数可以说是Iterator接口的具体实现方式。</p><p>执行<code>Generator</code>函数会返回一个遍历器对象，每一次Generator函数里 面的<code>yield</code>都相当一次遍历器对象的next()方法，并且可以 通过<code>next(value)</code>方法传入自定义的value,来改变<code>Generator</code>函数的行为。</p><p><code>Generator</code>函数可以通过配合<code>Thunk</code> 函数更轻松更优雅的实现异步编程和控制流管理。</p>',12),p={href:"https://juejin.im/post/5e1faa3d51882520a167df0e",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("https://juejin.im/post/5e1faa3d51882520a167df0e"),c={render:function(n,a){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",p,[o,(0,e.Wm)(s)])])])],64)}}}}]);