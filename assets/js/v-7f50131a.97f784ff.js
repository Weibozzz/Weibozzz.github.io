"use strict";(self.webpackChunkweiboqianduan=self.webpackChunkweiboqianduan||[]).push([[2017],{4553:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7f50131a",path:"/React/hooks%E4%B9%8Bmemo%E5%92%8CuseCallback.html",title:"hooks之memo和useCallback",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"useCallback 记忆函数",slug:"usecallback-记忆函数",children:[]},{level:2,title:"useMemo 记忆组件",slug:"usememo-记忆组件",children:[]},{level:2,title:"引用",slug:"引用",children:[]},{level:2,title:"今日图 - 图解 HTTP 状态码",slug:"今日图-图解-http-状态码",children:[]}],filePathRelative:"React/hooks之memo和useCallback.md",git:{updatedTime:1626767622e3}}},8120:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var p=a(6252);const e=a.p+"assets/img/fsdsdsdfs.c1cb8ca7.png",t=(0,p.uE)('<h1 id="hooks之memo和usecallback"><a class="header-anchor" href="#hooks之memo和usecallback">#</a> hooks之memo和useCallback</h1><h2 id="usecallback-记忆函数"><a class="header-anchor" href="#usecallback-记忆函数">#</a> useCallback 记忆函数</h2><p>在类组件中，我们经常犯下面这样的错误：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>SomeComponent style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">14</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> doSomething<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;do something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">/</span><span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这样写有什么坏处呢？一旦 <code>App</code> 组件的 <code>props</code> 或者状态改变了就会触发重渲染，即使跟 <code>SomeComponent</code> 组件不相关，由于每次 <code>render</code> 都会产生新的 <code>style</code> 和 <code>doSomething</code>，所以会导致 <code>SomeComponent</code> 重新渲染，倘若 <code>SomeComponent</code> 是一个大型的组件树，这样的 <code>Virtual Dom</code> 的比较显然是很浪费的，解决的办法也很简单，将参数抽离成变量。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fontSizeStyle <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">14</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">doSomething</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;do something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>SomeComponent style<span class="token operator">=</span><span class="token punctuation">{</span>fontSizeStyle<span class="token punctuation">}</span> doSomething<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doSomething <span class="token punctuation">}</span>  <span class="token operator">/</span><span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在类组件中，我们还可以通过 <code>this</code> 这个对象来存储函数，而在函数组件中没办法进行挂载了。所以函数组件在每次渲染的时候如果有传递函数的话都会重渲染子组件。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Click happened&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>SomeComponent onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Click Me<span class="token operator">&lt;</span><span class="token operator">/</span>SomeComponent<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>而有了 <code>useCallback</code> 就不一样了，你可以通过 <code>useCallback</code> 获得一个记忆后的函数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> memoizedHandleClick <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Click happened&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空数组代表无论什么情况下该函数都不会发生改变</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>SomeComponent onClick<span class="token operator">=</span><span class="token punctuation">{</span>memoizedHandleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Click Me<span class="token operator">&lt;</span><span class="token operator">/</span>SomeComponent<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>老规矩，第二个参数传入一个数组，数组中的每一项一旦值或者引用发生改变，<code>useCallback</code> 就会重新返回一个新的记忆函数提供给后面进行渲染。</p><p>这样只要子组件继承了 <code>PureComponent</code> 或者使用 <code>React.memo</code> 就可以有效避免不必要的 <code>VDOM</code> 渲染。</p><h2 id="usememo-记忆组件"><a class="header-anchor" href="#usememo-记忆组件">#</a> useMemo 记忆组件</h2><p><code>useCallback</code> 的功能完全可以由 <code>useMemo</code> 所取代，如果你想通过使用 <code>useMemo</code> 返回一个记忆函数也是完全可以的。</p><p><code>useCallback(fn, inputs) is equivalent to useMemo(() =&gt; fn, inputs).</code> 所以前面使用 <code>useCallback</code> 的例子可以使用 <code>useMemo</code> 进行改写：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> memoizedHandleClick <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Click happened&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空数组代表无论什么情况下该函数都不会发生改变</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>SomeComponent onClick<span class="token operator">=</span><span class="token punctuation">{</span>memoizedHandleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Click Me<span class="token operator">&lt;</span><span class="token operator">/</span>SomeComponent<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>唯一的区别是：**useCallback 不会执行第一个参数函数，而是将它返回给你，而 useMemo 会执行第一个函数并且将函数执行结果返回给你。**所以在前面的例子中，可以返回 handleClick 来达到存储函数的目的。</p><p>所以 <code>useCallback</code> 常用记忆事件函数，生成记忆后的事件函数并传递给子组件使用。而 <code>useMemo</code> 更适合经过函数计算得到一个确定的值，比如记忆组件。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Only re-rendered if `a` changes:</span>\n  <span class="token keyword">const</span> child1 <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>Child1 a<span class="token operator">=</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Only re-rendered if `b` changes:</span>\n  <span class="token keyword">const</span> child2 <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>Child2 b<span class="token operator">=</span><span class="token punctuation">{</span>b<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>\n      <span class="token punctuation">{</span>child1<span class="token punctuation">}</span>\n      <span class="token punctuation">{</span>child2<span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>当 <code>a/b </code>改变时，<code>child1/child2</code> 才会重新渲染。从例子可以看出来，只有在第二个参数数组的值发生变化时，才会触发子组件的更新。</p><h2 id="引用"><a class="header-anchor" href="#引用">#</a> 引用</h2><ul><li>https://github.com/happylindz/blog/issues/19</li></ul><h2 id="今日图-图解-http-状态码"><a class="header-anchor" href="#今日图-图解-http-状态码">#</a> 今日图 - 图解 HTTP 状态码</h2><p><img src="'+e+'" alt="fsdsdsdfs.png"></p>',24),o={},c=(0,a(3744).Z)(o,[["render",function(n,s){return t}]])}}]);