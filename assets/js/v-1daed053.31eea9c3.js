"use strict";(self.webpackChunkweiboqianduan=self.webpackChunkweiboqianduan||[]).push([[1766],{1304:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-1daed053",path:"/JS/RAF%E6%9B%BF%E4%BB%A3setTimeout_setInterval.html",title:"RAF替代setTimeout_setInterval",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"前言",slug:"前言",children:[]},{level:2,title:"requestAnimationFrame",slug:"requestanimationframe",children:[{level:3,title:"语法",slug:"语法",children:[]}]},{level:2,title:"了解微任务、宏任务与Event-Loop",slug:"了解微任务、宏任务与event-loop",children:[]},{level:2,title:"运行机制",slug:"运行机制",children:[{level:3,title:"setTimeout",slug:"settimeout",children:[]},{level:3,title:"setInterval",slug:"setinterval",children:[]}]},{level:2,title:"迭代setTimeout实现setInterval",slug:"迭代settimeout实现setinterval",children:[]},{level:2,title:"模拟setInterval/setTimeout的基本使用",slug:"模拟setinterval-settimeout的基本使用",children:[{level:3,title:"RAF",slug:"raf",children:[]},{level:3,title:"使用",slug:"使用",children:[]}]},{level:2,title:"计算计算机刷新频率",slug:"计算计算机刷新频率",children:[]},{level:2,title:"引用",slug:"引用",children:[]}],filePathRelative:"JS/RAF替代setTimeout_setInterval.md",git:{updatedTime:1638157697e3}}},8948:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var t=a(6252);const p=a.p+"assets/img/setinterval.252dffff.jpg",e=(0,t.uE)('<h1 id="raf替代settimeout-setinterval"><a class="header-anchor" href="#raf替代settimeout-setinterval">#</a> RAF替代setTimeout_setInterval</h1><h2 id="前言"><a class="header-anchor" href="#前言">#</a> 前言</h2><p>为什么用 <code>requestAnimationFrame</code>代替 <code>setInterval</code> 和 <code>setTimeout</code>？那得先了解微任务、宏任务与<code>Event-Loop</code>， 还有 <code>setInterval</code> 存在的问题</p><h2 id="requestanimationframe"><a class="header-anchor" href="#requestanimationframe">#</a> requestAnimationFrame</h2><blockquote><p>window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画， 并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。 该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</p></blockquote><p><strong>若你想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用window.requestAnimationFrame()</strong></p><h3 id="语法"><a class="header-anchor" href="#语法">#</a> 语法</h3><p><code>window.requestAnimationFrame(callback);</code></p><ul><li>callback 下一次重绘之前更新动画帧所调用的函数(即上面所说的回调函数)。该回调函数会被传 入<code>DOMHighResTimeStamp</code>参数，该参数与<code>performance.now()</code>的返回值相同，它表示<code>requestAnimationFrame() </code>开 始去执行回调函数的时刻。</li><li>返回值 一个 <code>long</code> 整数，请求 <code>ID</code> ，是回调列表中唯一的标识。是个非零值，没别的意义。你可以传这个值给 <code>window.cancelAnimationFrame()</code> 以取消回调函数。</li></ul><h2 id="了解微任务、宏任务与event-loop"><a class="header-anchor" href="#了解微任务、宏任务与event-loop">#</a> 了解微任务、宏任务与Event-Loop</h2>',10),o=(0,t.Uk)("微任务_宏任务与Event-Loop"),c=(0,t.uE)('<h2 id="运行机制"><a class="header-anchor" href="#运行机制">#</a> 运行机制</h2><h3 id="settimeout"><a class="header-anchor" href="#settimeout">#</a> setTimeout</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>实际上，把<code>setTimeout</code>的第二个参数设置为<code>0s</code>，并不是立即执行函数的意思，只是把函数放入异步队列。浏览器先执行完同步队列里的任务，才会去执行异步队列中的任务</p><p>在下面这个例子中，给一个按钮<code>btn</code>设置了一个事件处理程序。事件处理程序设置了一个<code>250ms</code>后调用的定时器。点击该按钮后， 首先将<code>onclick</code>事件处理程序加入队列。该程序执行后才设置定时器，再有250ms后，指定的代码才被添加到队列中等待执行</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\nbtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果上面代码中的<code>onclick</code>事件处理程序执行了<code>300ms</code>，那么定时器的代码至少要在定时器设置之后的<code>300ms</code>后才会被执行。队列中所有 的代码都要等到<code>javascript</code>进程空闲之后才能执行，而不管它们是如何添加到队列中的</p><h3 id="setinterval"><a class="header-anchor" href="#setinterval">#</a> setInterval</h3><p>使用<code>setInterval()</code>的问题在于，定时器代码可能在代码再次被添加到队列之前还没有完成执行，结果导致定时器代码连续运行好几次，而之间没有任何停顿。 而<code>javascript</code>引擎对这个问题的解决是：当使用<code>setInterval()</code>时，仅当没有该定时器的任何其他代码实例时，才将定时器代码添加到队列中。这确保了定时器代码 加入到队列中的最小时间间隔为指定间隔</p><p>但是，这样会导致两个问题：<strong>1、某些间隔被跳过；2、多个定时器的代码执行之间的间隔可能比预期的小</strong></p><p>假设，某个<code>onclick</code>事件处理程序使用<code>setInterval()</code>设置了<code>200ms</code>间隔的定时器。如果事件处理程序花了<code>300ms</code>多一点时间完成，同时定时器代码也花了差不 多的时间，就会同时出现跳过某间隔的情况</p><p><img src="'+p+'" alt=""></p><p>例子中的第一个定时器是在<code>205ms</code>处添加到队列中的，但是直到过了<code>300ms</code>处才能执行。当执行这个定时器代码时，在<code>405ms</code>处又给队列 添加了另一个副本。在下一个间隔，即605ms处，第一个定时器代码仍在运行，同时在队列中已经有了一个定时 器代码的实例。结果是，在这个时间点上的定时器代码不会被添加到队列中</p><h2 id="迭代settimeout实现setinterval"><a class="header-anchor" href="#迭代settimeout实现setinterval">#</a> 迭代setTimeout实现setInterval</h2><p>某些公司会禁用 <code>setInterval</code> 为了避免<code>setInterval()</code>定时器的问题，可以使用链式<code>setTimeout()</code>调用</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="模拟setinterval-settimeout的基本使用"><a class="header-anchor" href="#模拟setinterval-settimeout的基本使用">#</a> 模拟setInterval/setTimeout的基本使用</h2><h3 id="raf"><a class="header-anchor" href="#raf">#</a> RAF</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">RAF</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">init</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_timerIdMap <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">run</span> <span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">&#39;interval&#39;</span><span class="token punctuation">,</span> cb<span class="token punctuation">,</span> interval <span class="token operator">=</span> <span class="token number">16.7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span>now\n    <span class="token keyword">let</span> stime <span class="token operator">=</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> etime <span class="token operator">=</span> stime\n    <span class="token comment">//创建Symbol类型作为key值，保证返回值的唯一性，用于清除定时器使用</span>\n    <span class="token keyword">const</span> timerSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setIdMap</span><span class="token punctuation">(</span>timerSymbol<span class="token punctuation">,</span> type<span class="token punctuation">,</span> loop<span class="token punctuation">)</span>\n      etime <span class="token operator">=</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>etime <span class="token operator">-</span> stime <span class="token operator">&gt;=</span> interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&#39;interval&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          stime <span class="token operator">=</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          etime <span class="token operator">=</span> stime\n        <span class="token punctuation">}</span>\n        <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        type <span class="token operator">===</span> <span class="token string">&#39;timeout&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timerSymbol<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setIdMap</span><span class="token punctuation">(</span>timerSymbol<span class="token punctuation">,</span> type<span class="token punctuation">,</span> loop<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> timerSymbol <span class="token comment">// 返回Symbol保证每次调用setTimeout/setInterval返回值的唯一性</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">setIdMap</span> <span class="token punctuation">(</span><span class="token parameter">timerSymbol<span class="token punctuation">,</span> type<span class="token punctuation">,</span> loop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_timerIdMap<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">[</span>timerSymbol<span class="token punctuation">]</span><span class="token operator">=</span> id\n  <span class="token punctuation">}</span>\n  <span class="token function">setTimeout</span> <span class="token punctuation">(</span><span class="token parameter">cb<span class="token punctuation">,</span> interval</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 实现setTimeout 功能</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&#39;timeout&#39;</span><span class="token punctuation">,</span> cb<span class="token punctuation">,</span> interval<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">clearTimeout</span> <span class="token punctuation">(</span><span class="token parameter">timer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_timerIdMap<span class="token punctuation">.</span>timeout<span class="token punctuation">[</span>timer<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">setInterval</span> <span class="token punctuation">(</span><span class="token parameter">cb<span class="token punctuation">,</span> interval</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 实现setInterval功能</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&#39;interval&#39;</span><span class="token punctuation">,</span> cb<span class="token punctuation">,</span> interval<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">clearInterval</span> <span class="token punctuation">(</span><span class="token parameter">timer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_timerIdMap<span class="token punctuation">.</span>interval<span class="token punctuation">[</span>timer<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h3 id="使用"><a class="header-anchor" href="#使用">#</a> 使用</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RAF</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> timer1 <span class="token operator">=</span> raf<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> timer2 <span class="token operator">=</span> raf<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span>\n\nraf<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  raf<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>timer1<span class="token punctuation">)</span>\n  raf<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>timer2<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="计算计算机刷新频率"><a class="header-anchor" href="#计算计算机刷新频率">#</a> 计算计算机刷新频率</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token comment">// 题外计算一下 requestAnimationFrame 刷新频率</span>\n  <span class="token keyword">let</span> startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">function</span> <span class="token function">calc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>calc<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> nowTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> diff <span class="token operator">=</span> nowTime <span class="token operator">-</span> startTime\n    startTime <span class="token operator">=</span> nowTime\n    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> total <span class="token operator">=</span> newArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> t <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;平均刷新次数&#39;</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token punctuation">(</span>total <span class="token operator">/</span> newArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="引用"><a class="header-anchor" href="#引用">#</a> 引用</h2>',24),l={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/window/requestAnimationFrame",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Uk)("requestAnimationFrame"),i={href:"https://www.cnblogs.com/xiaohuochai/p/5773183.html",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Uk)("深入理解定时器系列第一篇——理解setTimeout和setInterval"),k={href:"https://zhuanlan.zhihu.com/p/34868095",target:"_blank",rel:"noopener noreferrer"},m=(0,t.Uk)("RAF替代setTimeout/setInterval"),b={},d=(0,a(3744).Z)(b,[["render",function(n,s){const a=(0,t.up)("RouterLink"),p=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("p",null,[(0,t.Wm)(a,{to:"/JS/%E5%BE%AE%E4%BB%BB%E5%8A%A1_%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8EEvent-Loop.html"},{default:(0,t.w5)((()=>[o])),_:1})]),c,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",l,[u,(0,t.Wm)(p)])]),(0,t._)("li",null,[(0,t._)("a",i,[r,(0,t.Wm)(p)])]),(0,t._)("li",null,[(0,t._)("a",k,[m,(0,t.Wm)(p)])])])],64)}]])}}]);