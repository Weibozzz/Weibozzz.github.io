"use strict";(self.webpackChunkweiboqianduan=self.webpackChunkweiboqianduan||[]).push([[7062],{5944:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-7a674a97",path:"/Utils/Linux/shell%E7%AE%80%E5%8D%95%E8%84%9A%E6%9C%AC.html",title:"shell简单脚本",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"变量",slug:"变量",children:[]},{level:2,title:"ifelse",slug:"ifelse",children:[]},{level:2,title:"params",slug:"params",children:[]},{level:2,title:"read",slug:"read",children:[]},{level:2,title:"写入文件",slug:"写入文件",children:[]},{level:2,title:"读文件",slug:"读文件",children:[]},{level:2,title:"alias",slug:"alias",children:[{level:3,title:"让其永久生效",slug:"让其永久生效",children:[]}]},{level:2,title:"shell简单命令",slug:"shell简单命令",children:[]},{level:2,title:"参考",slug:"参考",children:[]},{level:2,title:"今日图 - 我写的代码到可运行的代码",slug:"今日图-我写的代码到可运行的代码",children:[]}],filePathRelative:"Utils/Linux/shell简单脚本.md",git:{updatedTime:1627026748e3}}},7871:(s,n,a)=>{a.r(n),a.d(n,{default:()=>d});var e=a(6252);const l=a.p+"assets/img/16b873fd487172ba.39928688.gif",p=(0,e.uE)('<h1 id="shell简单脚本"><a class="header-anchor" href="#shell简单脚本">#</a> shell简单脚本</h1><p>前端用 <code>shell</code> 可以解决很多繁琐的 <code>git</code> 提交，繁琐的打包部署，在这里就简单分享一下 <strong>注意mac下的sh文件和window下的sh文件格式可能会不一样，注意要切换一下，要不然会执行失败</strong></p><h2 id="变量"><a class="header-anchor" href="#变量">#</a> 变量</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">your_name</span><span class="token operator">=</span><span class="token string">&quot;qinjx&quot;</span>\n<span class="token builtin class-name">echo</span> <span class="token variable">$your_name</span>\n<span class="token builtin class-name">echo</span> <span class="token variable">${your_name}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="ifelse"><a class="header-anchor" href="#ifelse">#</a> ifelse</h2><p>新建后缀为 <code>.sh</code> 的文件，选用 <code>git bash</code> 或者 <code>linux</code> 命令工具执行 <code>sh ifelse.sh</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># ifeles.sh</span>\n<span class="token comment">#!/usr/bin/env bash</span>\n<span class="token assign-left variable">num1</span><span class="token operator">=</span><span class="token number">1</span>\n<span class="token assign-left variable">num2</span><span class="token operator">=</span><span class="token number">2</span>\n<span class="token keyword">if</span> <span class="token builtin class-name">test</span> $<span class="token punctuation">[</span>num1<span class="token punctuation">]</span> -eq $<span class="token punctuation">[</span>num2<span class="token punctuation">]</span>\n<span class="token keyword">then</span>\n    <span class="token builtin class-name">echo</span> <span class="token string">&#39;两个数字相等!&#39;</span>\n<span class="token keyword">else</span>\n    <span class="token builtin class-name">echo</span> <span class="token string">&#39;两个数字不相等!&#39;</span>\n<span class="token keyword">fi</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;结束&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>Shell中的 test 命令用于检查某个条件是否成立</li><li>eq 等于则为真</li></ul><h2 id="params"><a class="header-anchor" href="#params">#</a> params</h2><p>获取参数</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env bash</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;Shell 传递参数实例！&quot;</span><span class="token punctuation">;</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;第1个参数为：<span class="token variable">$1</span>&quot;</span><span class="token punctuation">;</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;第2个参数为：<span class="token variable">$2</span>&quot;</span><span class="token punctuation">;</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;第3个参数为：<span class="token variable">$3</span>&quot;</span><span class="token punctuation">;</span>\n\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;参数个数为：<span class="token variable">$#</span>&quot;</span><span class="token punctuation">;</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;传递的参数作为一个字符串显示：<span class="token variable">$*</span>&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="read"><a class="header-anchor" href="#read">#</a> read</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 获取当前分支 =======</span>\n<span class="token assign-left variable">branch</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> symbolic-ref --short HEAD<span class="token variable">)</span></span>\n<span class="token comment"># git提交 =======</span>\n<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n<span class="token builtin class-name">read</span> -p <span class="token string">$&#39;<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\n">\\n</span>请输入您的commit信息： &#39;</span> commitInfo\n<span class="token function">git</span> commit -m <span class="token variable">${commitInfo}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="写入文件"><a class="header-anchor" href="#写入文件">#</a> 写入文件</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>\n\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;write to file.&quot;</span>\n\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;iput your name:&quot;</span>\n<span class="token builtin class-name">read</span> y_name\n\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;Hello,<span class="token variable">${y_name}</span>&quot;</span> <span class="token operator">&gt;</span> f_users.txt\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="读文件"><a class="header-anchor" href="#读文件">#</a> 读文件</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>\n\n<span class="token function">cat</span> file<span class="token punctuation">(</span>待读取的文件<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> line\n<span class="token keyword">do</span>\n    <span class="token builtin class-name">echo</span> <span class="token variable">$line</span>\n<span class="token keyword">done</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="alias"><a class="header-anchor" href="#alias">#</a> alias</h2><p>下面这几个命令，可能是你天天都在敲的。所以，你应该设置成 <code>alias</code> 来提高效率</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">alias</span> <span class="token assign-left variable">nis</span><span class="token operator">=</span><span class="token string">&quot;npm install --save &quot;</span>\n<span class="token builtin class-name">alias</span> <span class="token assign-left variable">svim</span><span class="token operator">=</span><span class="token string">&#39;sudo vim&#39;</span>\n<span class="token builtin class-name">alias</span> <span class="token assign-left variable">mkcd</span><span class="token operator">=</span><span class="token string">&#39;foo(){ mkdir -p &quot;$1&quot;; cd &quot;$1&quot; }; foo &#39;</span>\n<span class="token builtin class-name">alias</span> <span class="token assign-left variable">install</span><span class="token operator">=</span><span class="token string">&#39;sudo apt get install&#39;</span>\n<span class="token builtin class-name">alias</span> <span class="token assign-left variable">update</span><span class="token operator">=</span><span class="token string">&#39;sudo apt-get update; sudo apt-get upgrade&#39;</span>\n<span class="token builtin class-name">alias</span> <span class="token punctuation">..</span><span class="token operator">=</span><span class="token string">&quot;cd ..&quot;</span>\n<span class="token builtin class-name">alias</span> <span class="token punctuation">..</span>.<span class="token operator">=</span><span class="token string">&quot;cd ..; cd ..&quot;</span>\n<span class="token builtin class-name">alias</span> <span class="token assign-left variable">www</span><span class="token operator">=</span><span class="token string">&#39;python -m SimpleHTTPServer 8000&#39;</span>\n<span class="token builtin class-name">alias</span> <span class="token assign-left variable">sock5</span><span class="token operator">=</span><span class="token string">&#39;ssh -D 8080 -q -C -N -f user@your.server&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>关闭命令行，发现失效了</p><h3 id="让其永久生效"><a class="header-anchor" href="#让其永久生效">#</a> 让其永久生效</h3><p><code>vim ～/.zshrc</code></p><p>将别名添加进去，保存退出</p><p>紧接着执行<code>source</code>使其生效 <code>source ~/.zshrc</code></p><h2 id="shell简单命令"><a class="header-anchor" href="#shell简单命令">#</a> shell简单命令</h2><ul><li>重命名文件 <code>mv oldPath newPath</code></li><li>复制文件 <code>cp -r file targetToPath</code></li><li>删除文件 <code>rm -rf file</code></li><li>打开文件,支持excel等 <code>start filePath</code></li></ul><h2 id="参考"><a class="header-anchor" href="#参考">#</a> 参考</h2>',28),t={href:"https://www.runoob.com/linux/linux-comm-read.html",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("read"),i={href:"https://coolshell.cn/articles/19219.html",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("shell"),r={href:"https://www.cnblogs.com/iloveyoucc/archive/2012/07/10/2585529.html",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("读文件"),b=(0,e._)("h2",{id:"今日图-我写的代码到可运行的代码"},[(0,e._)("a",{class:"header-anchor",href:"#今日图-我写的代码到可运行的代码"},"#"),(0,e.Uk)(" 今日图 - 我写的代码到可运行的代码")],-1),m=(0,e._)("p",null,[(0,e._)("img",{src:l,alt:"16b873fd487172ba.gif"})],-1),h={},d=(0,a(3744).Z)(h,[["render",function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",t,[c,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",i,[o,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",r,[u,(0,e.Wm)(a)])])]),b,m],64)}]])}}]);