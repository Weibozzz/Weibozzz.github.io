"use strict";(self.webpackChunkweiboqianduan=self.webpackChunkweiboqianduan||[]).push([[7787],{5561:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-72fa6871",path:"/JS/%E7%90%86%E8%A7%A3JS%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E5%92%8C%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96.html",title:"理解JS函数节流和函数防抖",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"函数防抖和函数节流对比",slug:"函数防抖和函数节流对比",children:[]},{level:2,title:"throttle 应用场景",slug:"throttle-应用场景",children:[]},{level:2,title:"debounce 应用场景",slug:"debounce-应用场景",children:[]},{level:2,title:"今日图",slug:"今日图",children:[]}],filePathRelative:"JS/理解JS函数节流和函数防抖.md",git:{updatedTime:1627026748e3}}},1018:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(6252);const e=a.p+"assets/img/38978809-fe601d98-43ea-11e8-9b67-491b52b2b76c.ebfa2d65.PNG",t=a.p+"assets/img/gdgf.f72cfca6.gif",o=(0,p.uE)('<h1 id="理解js函数节流和函数防抖"><a class="header-anchor" href="#理解js函数节流和函数防抖">#</a> 理解JS函数节流和函数防抖</h1><h2 id="函数防抖和函数节流对比"><a class="header-anchor" href="#函数防抖和函数节流对比">#</a> 函数防抖和函数节流对比</h2><p>它们的目标都是为了防止过多的无意义函数调用。</p><p>函数防抖的目的是在多次连续触发事件时，在指定时间内（<code>delay</code> 参数）若再次触发调用回调函数，那么将忽略当前的函数调用，只有在经过指定时间内，没有再次触发事件时，才会真正的调用回调函数。</p><p>函数节流的目的是为了限制回调函数的最高执行频率的（比如 1s 内最多执行 2 次）。在单位时间内（<code>wait</code> 参数）最多执行一次回调函数调用。多余的回调函数调用将被忽略。</p><p>二者与普通回调函数调用的可视化对比如下：</p><p><img src="'+e+'" alt="38978809-fe601d98-43ea-11e8-9b67-491b52b2b76c.PNG"></p><h2 id="throttle-应用场景"><a class="header-anchor" href="#throttle-应用场景">#</a> throttle 应用场景</h2><p>函数节流有哪些应用场景？哪些时候我们需要间隔一定时间触发回调来控制函数调用频率？</p><ul><li><code>DOM</code> 元素的拖拽功能实现（<code>mousemove</code>）</li><li>射击游戏的 <code>mousedown/keydown</code> 事件（单位时间只能发射一颗子弹）</li><li>计算鼠标移动的距离（<code>mousemove</code>）</li><li>Canvas 模拟画板功能（<code>mousemove</code>）</li><li>搜索联想（<code>keyup</code>）</li><li>监听滚动事件判断是否到页面底部自动加载更多：给 <code>scroll</code> 加了 <code>debounce</code> 后，只有用户停止滚动后，才会判断是否到了页面底部；如果是 <code>throttle</code> 的话，只要页面滚动就会间隔一段时间判断一次</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * 用于限制 fn 函数在 period 时间段内只调用一次，即限制 fn 调用的频率\n * 示例中实现了首次和末次一定会被调用，中间调用被限定为一定频率\n *\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">fn</span> 要被节流的函数\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token optional-parameter"><span class="token punctuation">[</span><span class="token parameter">period</span><span class="token punctuation">=</span><span class="token code language-javascript"><span class="token number">200</span></span><span class="token punctuation">]</span></span> 被节流的时间段\n * <span class="token keyword">@returns</span> 一个匿名函数包装\n */</span>\n<span class="token keyword">function</span> <span class="token function">throttle</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> period<span class="token operator">=</span><span class="token number">200</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> _lastTime <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token keyword">let</span> _timer <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> _nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    _timer <span class="token operator">&amp;&amp;</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>_timer<span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_lastTime <span class="token operator">||</span> _nowTime <span class="token operator">-</span> _lastTime <span class="token operator">&gt;</span> period<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n      _lastTime <span class="token operator">=</span> _nowTime\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 确保最后一次即使不满足 period 时间段，但仍会调用</span>\n      <span class="token comment">// 使用箭头函数来确保 this 不变</span>\n      _timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> period<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="debounce-应用场景"><a class="header-anchor" href="#debounce-应用场景">#</a> debounce 应用场景</h2><p>函数去抖有哪些应用场景？哪些时候对于连续的事件响应我们只需要执行一次回调？</p><ul><li>每次 <code>resize/scroll</code> 触发统计事件</li><li>文本输入的验证（连续输入文字后发送 AJAX 请求进行验证，验证一次就好）</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">fn</span>     要实现函数防抖的原函数\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>Number<span class="token punctuation">}</span></span>   <span class="token parameter">delay</span>  延迟时间\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>Boolean<span class="token punctuation">}</span></span>   <span class="token parameter">now</span>   是否第一次立即调用后启用防抖\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>        添加防抖功能的包装函数\n */</span>\n<span class="token comment">// 最后一次调用总是会被执行</span>\n  <span class="token keyword">function</span> <span class="token function">debounce</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">,</span> now <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> __timer <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token keyword">let</span> isFirst <span class="token operator">=</span> now\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>__timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>__timer<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>isFirst<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n        isFirst <span class="token operator">=</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        __timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="今日图"><a class="header-anchor" href="#今日图">#</a> 今日图</h2><p><img src="'+t+'" alt="gdgf.gif"></p>',17),c={},l=(0,a(3744).Z)(c,[["render",function(n,s){return o}]])}}]);