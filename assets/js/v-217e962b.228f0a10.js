"use strict";(self.webpackChunkweiboqianduan=self.webpackChunkweiboqianduan||[]).push([[9186],{7906:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-217e962b",path:"/CodeHobby/%E5%B0%91%E5%86%99if-else.html",title:"少写if-else",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Map",slug:"map",children:[{level:3,title:"语法",slug:"语法",children:[]},{level:3,title:"属性",slug:"属性",children:[]},{level:3,title:"方法",slug:"方法",children:[]},{level:3,title:"例子",slug:"例子",children:[]}]},{level:2,title:"你本可以少写些 if-else",slug:"你本可以少写些-if-else",children:[{level:3,title:"if/else",slug:"if-else",children:[]},{level:3,title:"配置数据与业务逻辑分离",slug:"配置数据与业务逻辑分离",children:[]},{level:3,title:"更加灵活的数据配置",slug:"更加灵活的数据配置",children:[]}]},{level:2,title:"摘自",slug:"摘自",children:[]},{level:2,title:"今日图 - 结局引起极度舒适",slug:"今日图-结局引起极度舒适",children:[]}],filePathRelative:"CodeHobby/少写if-else.md",git:{updatedTime:1627026748e3}}},3387:(n,s,a)=>{a.r(s),a.d(s,{default:()=>v});var p=a(6252);const e=a.p+"assets/img/16af549c50951183.71532756.webp",t=a.p+"assets/img/16af54bf37d0c660.76785ba6.webp",o=a.p+"assets/img/16af54d09b6910fb.09382f01.webp",c=a.p+"assets/img/16af54dbece1a0e4.59367c7a.webp",l=a.p+"assets/img/16af2f0308cb1a80.8fe4ba2c.gif",u=(0,p.uE)('<h1 id="少写if-else"><a class="header-anchor" href="#少写if-else">#</a> 少写if-else</h1><blockquote><p>Map使用-你本可以少写些if-else</p></blockquote><h2 id="map"><a class="header-anchor" href="#map">#</a> Map</h2><p>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。</p><h3 id="语法"><a class="header-anchor" href="#语法">#</a> 语法</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>iterable<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>Iterable</code> 可以是一个数组或者其他 <code>iterable</code> 对象，其元素为键值对(两个元素的数组，例如: <code>[[ 1, &#39;one&#39; ],[ 2, &#39;two&#39; ]])</code>。 每个键值对都会添加到新的 <code>Map</code>。<code>null</code> 会被当做 <code>undefined</code>。</p><h3 id="属性"><a class="header-anchor" href="#属性">#</a> 属性</h3><ul><li>size</li></ul><h3 id="方法"><a class="header-anchor" href="#方法">#</a> 方法</h3><ul><li>clear()</li><li>delete(key)</li><li>entries() 返回一个新的包含 [key, value] 的 Iterator 对象</li><li>forEach(callbackFn[, thisArg])</li><li>get(key)</li><li>has(key)</li><li>keys()</li><li>values()</li><li>set(key, value)</li></ul><h3 id="例子"><a class="header-anchor" href="#例子">#</a> 例子</h3><h4 id="使用-map-对象"><a class="header-anchor" href="#使用-map-对象">#</a> 使用 Map 对象</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> keyObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">keyFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    keyString <span class="token operator">=</span> <span class="token string">&quot;a string&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 添加键</span>\nmyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>keyString<span class="token punctuation">,</span> <span class="token string">&quot;和键&#39;a string&#39;关联的值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>keyObj<span class="token punctuation">,</span> <span class="token string">&quot;和键keyObj关联的值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>keyFunc<span class="token punctuation">,</span> <span class="token string">&quot;和键keyFunc关联的值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmyMap<span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment">// 3</span>\n\n<span class="token comment">// 读取值</span>\nmyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>keyString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// &quot;和键&#39;a string&#39;关联的值&quot;</span>\nmyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>keyObj<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// &quot;和键keyObj关联的值&quot;</span>\nmyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>keyFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// &quot;和键keyFunc关联的值&quot;</span>\n\nmyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;a string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// &quot;和键&#39;a string&#39;关联的值&quot;</span>\n                         <span class="token comment">// 因为keyString === &#39;a string&#39;</span>\nmyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// undefined, 因为keyObj !== {}</span>\nmyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// undefined, 因为keyFunc !== function () {}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="使用-for-of-方法迭代-map"><a class="header-anchor" href="#使用-for-of-方法迭代-map">#</a> 使用 for..of 方法迭代 Map</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;zero&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> myMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 将会显示两个log。一个是&quot;0 = zero&quot;另一个是&quot;1 = one&quot;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">of</span> myMap<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 将会显示两个log。 一个是 &quot;0&quot; 另一个是 &quot;1&quot;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> value <span class="token keyword">of</span> myMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 将会显示两个log。 一个是 &quot;zero&quot; 另一个是 &quot;one&quot;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> myMap<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 将会显示两个log。 一个是 &quot;0 = zero&quot; 另一个是 &quot;1 = one&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="使用-foreach-方法迭代-map"><a class="header-anchor" href="#使用-foreach-方法迭代-map">#</a> 使用 forEach() 方法迭代 Map</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>myMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> myMap<span class="token punctuation">)</span>\n<span class="token comment">// 将会显示两个logs。 一个是 &quot;0 = zero&quot; 另一个是 &quot;1 = one&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="你本可以少写些-if-else"><a class="header-anchor" href="#你本可以少写些-if-else">#</a> 你本可以少写些 if-else</h2><h3 id="if-else"><a class="header-anchor" href="#if-else">#</a> if/else</h3><p>我们以一个售后流程为例. 用户购买商品后, 可能会因为错件漏件/质量问题/描述不符等原因联系商家进行售后服务, 其中可能会涉及退款/退货/换货/补发等售后支持服务, 商家对此次售后的服务情况也会影响用户对商家的喜好. 在这样的场景下, 我们假设以下伪代码:</p><p><img src="'+e+'" alt="16af549c50951183.webp"></p><h3 id="配置数据与业务逻辑分离"><a class="header-anchor" href="#配置数据与业务逻辑分离">#</a> 配置数据与业务逻辑分离</h3><p><img src="'+t+'" alt="16af54bf37d0c660.webp"></p><h3 id="更加灵活的数据配置"><a class="header-anchor" href="#更加灵活的数据配置">#</a> 更加灵活的数据配置</h3><p>上一节使用了对象进行数据配置, 如果说有那么一点遗憾的地方, 那就是尽管属性的值可以为任意类型, 但是属性本身却只能是字符串类型, 这使得某些场景下我们不能很好的发挥配置逻辑分离的作用. 想象以下场景: 每个月末, 商家会挑选出狂热粉丝(喜爱程度大于等于100)发送留言&quot;感谢你&quot;并赠送10元优惠券, 普通粉丝(分数0-100)发送留言&quot;感谢&quot;, 黑粉(分数小于0)发送&quot;抱歉&quot;并赠送10元优惠券.</p><p>等等, 喜爱程度分数是不定的!</p><p>显然我们不能用对象去处理这样的数据(只要我还没疯掉), 如下:</p><p><img src="'+o+'" alt="16af54d09b6910fb.webp"></p><p>使用Map进行数据配置是非常棒的一种写法, 但是如果你必须兼容IE浏览器的话, 你必须考虑使用其它的数据结构用于替代Map:</p><p><img src="'+c+'" alt="16af54dbece1a0e4.webp"></p><h2 id="摘自"><a class="header-anchor" href="#摘自">#</a> 摘自</h2>',32),i=(0,p._)("li",null,"https://juejin.im/post/5cead18df265da1bc552405b",-1),r={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("MDN-iterator"),b={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Uk)("MDN-Map"),d={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Uk)("MDN-Generator"),h=(0,p._)("h2",{id:"今日图-结局引起极度舒适"},[(0,p._)("a",{class:"header-anchor",href:"#今日图-结局引起极度舒适"},"#"),(0,p.Uk)(" 今日图 - 结局引起极度舒适")],-1),g=(0,p._)("p",null,[(0,p._)("img",{src:l,alt:"16af2f0308cb1a80.gif"})],-1),y={},v=(0,a(3744).Z)(y,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[u,(0,p._)("ul",null,[i,(0,p._)("li",null,[(0,p._)("a",r,[k,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",b,[m,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",d,[f,(0,p.Wm)(a)])])]),h,g],64)}]])}}]);