"use strict";(self.webpackChunkweiboqianduan=self.webpackChunkweiboqianduan||[]).push([[2021],{4952:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-6156e46c",path:"/RegExp/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E6%95%B4%E7%90%86.html",title:"常用正则整理",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"正则预测",slug:"正则预测",children:[]},{level:2,title:"字符串不确定空格分割js",slug:"字符串不确定空格分割js",children:[]},{level:2,title:"匹配包括换行符在内的任意字符",slug:"匹配包括换行符在内的任意字符",children:[]},{level:2,title:"正则查找字符串",slug:"正则查找字符串",children:[]},{level:2,title:"match",slug:"match",children:[]},{level:2,title:"分组",slug:"分组",children:[]},{level:2,title:"正则断言",slug:"正则断言",children:[]},{level:2,title:"jsonp转化json实战遇到的问题",slug:"jsonp转化json实战遇到的问题",children:[]},{level:2,title:"正则贪婪",slug:"正则贪婪",children:[]},{level:2,title:"今日图 - 全栈工程师的日常",slug:"今日图-全栈工程师的日常",children:[]}],filePathRelative:"RegExp/常用正则整理.md",git:{updatedTime:1627026748e3}}},3685:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6252);const p=a.p+"assets/img/16a763d28be4b200.885f0feb.gif",t=(0,e.uE)('<h1 id="常用正则整理"><a class="header-anchor" href="#常用正则整理">#</a> 常用正则整理</h1><h2 id="正则预测"><a class="header-anchor" href="#正则预测">#</a> 正则预测</h2><p><code>^</code> 匹配一行的开头位置</p><p><code>(?![0-9]+$)</code> 预测该位置后面不全是数字</p><p><code>(?![a-zA-Z]+$)</code> 预测该位置后面不全是字母</p><p><code>[0-9A-Za-z] {6,10}</code> 由6-10位数字或这字母组成</p><p><code>$</code> 匹配行结尾位置</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$pattern <span class="token operator">=</span> <span class="token string">&#39;/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,10}$/&#39;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{3})\\d{4}(\\d{4})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> phone<span class="token operator">=</span><span class="token string">&quot;13423874592&quot;</span><span class="token punctuation">;</span>\n\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> phone<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&quot;$1****$2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//134****4592</span>\n\n    <span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">w.rar|zip|gz</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> file<span class="token operator">=</span><span class="token string">&quot;test.rar&quot;</span><span class="token punctuation">;</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z_0-9.-] @[a-zA-Z_0-9.-] .[a-zA-Z] $</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> email<span class="token operator">=</span><span class="token string">&quot;xiaoming.he-he@163.com&quot;</span><span class="token punctuation">;</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="字符串不确定空格分割js"><a class="header-anchor" href="#字符串不确定空格分割js">#</a> 字符串不确定空格分割js</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>   <span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;fdsfsdf dfsf dfsf    dsfasf&quot;</span><span class="token punctuation">;</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[  ]+ </span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+ </span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n   <span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;aaa_big.img&quot;</span><span class="token punctuation">;</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">_big</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//aaa.img</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="匹配包括换行符在内的任意字符"><a class="header-anchor" href="#匹配包括换行符在内的任意字符">#</a> 匹配包括换行符在内的任意字符</h2><ul><li>([\\s\\S]*)</li></ul><h2 id="正则查找字符串"><a class="header-anchor" href="#正则查找字符串">#</a> 正则查找字符串</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> reg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;project&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> str<span class="token operator">=</span><span class="token string">&#39;http://localhost:63342/project/test.html?_ijt=7eg35ek3pq5s7f4dgecpc89n4h;&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;abcdef&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>\n<span class="token comment">//var re = new RegExp(&#39;B&#39;,&#39;i&#39;); 也可以这样写</span>\n<span class="token function">alert</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="match"><a class="header-anchor" href="#match">#</a> match</h2><blockquote><p>在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null</p></blockquote><ul><li><p>用法： 字符串.match(正则)</p></li><li><p>量词： 至少出现一次 匹配不确定的次数（匹配就是搜索查找的意思）</p></li><li><p>全局匹配：g——global（正则中默认，只要搜索到复合规则的内容就会结束搜索 ）</p></li></ul><p>例子：找出指定格式的所有数字，如下找到 123，54，33，879</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;haj123sdk54hask33dkhalsd879&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>var re = /\\d+/g; </code>// 每次匹配至少一个数字 且全局匹配 如果不是全局匹配，当找到数字123，它就会停止了。就只会弹出123.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是1，2，3，5，4，3，3，879并不是我们想要的，有了加号，每次匹配的数字就是至少一个了</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [123，54，33，879]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="分组"><a class="header-anchor" href="#分组">#</a> 分组</h2><p>写一个时间字符串 <code>&#39;2017-03-05&#39;</code>, 正则表达式 <code>/\\d{4}-\\d{2}-\\d{2}/g</code> 可以匹配它，如下，</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{4}-\\d{2}-\\d{2}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;2017-03-20&#39;</span>\n<span class="token keyword">let</span> replaceString <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&quot;X&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>replaceString<span class="token punctuation">)</span>  <span class="token comment">//X</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>$1</code>, <code>$2</code>，<code>$3</code>都是字符串，可以进行任意组合，我们就可以得到想要的结果, &#39;$2/$3/$1&#39;, 我们就可以把一种日期格式，转化成另外一种日期格式</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;2017-03-20&#39;</span>\n<span class="token keyword">let</span> replaceString <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&quot;$2/$3/$1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>replaceString<span class="token punctuation">)</span>  <span class="token comment">//  03/20/2017</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>忽略分组：<code>$n</code>获取分组的内容和正则表达式中的分组是一一对应的，正则表达式中有几个分组，它从左向右就会对应几个<code>$n</code>， <code>$1</code> 永远获取的是第一个分组内容，<code>$2</code> 永远获取的都是第二个分组的内容，但有时候，我们想跳过某个分组，获取它下一个分组，比如<code>$2</code> 获取第三个分组的内容，这时正则表达式中的第二个分组前面要加 <code>?：</code>， 表示获取内容的时候可以忽略这个分组</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(?:\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;2017-03-20&#39;</span>\n<span class="token keyword">let</span> replaceString <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&#39;$2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// $2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>replaceString<span class="token punctuation">)</span>  <span class="token comment">//20</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在上面的代码中，我们在第二个分组前面加了 <code>?：</code>进行了忽略了，所以<code>$2</code> 获取的是第三个分组的内容。</p><p>分组还有一个概念，就是重复子项，它用<code>1,2</code>来表示，它们只用在正则表达式中，<code> 1</code> 代表的也是第一个分组，<code>2</code>代表的是第二个分组，它们主要的作用是匹配以下这种字符串，</p><p><code>121, 222, 323, 424</code>, 第一个数字和第三个数字相等，但又是不确定的数字， 所以在书写正则表达式时，必须保证第一项和第三项相等，第三项是第一项的复制，<code>1</code>, 就是正则表达式中第一个分组的复制。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d)2\\1</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;121 222 323 424&#39;</span>\n<span class="token keyword">let</span> replaceString <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&#39;X&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>replaceString<span class="token punctuation">)</span>  <span class="token comment">// X X X X</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>还有一个或的概念，符号表示为<code>|</code>, <code>/ab|ac/</code>, 当它们去匹配字符串时，只要出现其中的一个就算成功</p><p>将 <code>ip</code> 地址变为三位数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;12.34.23.23 4.4.4.4 45.456.456.453&quot;</span> <span class="token comment">// 假设这是三个ip</span>\nstr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;00$1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">0*(\\d{3})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;$1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 012.034.023.023 004.004.004.004 045.456.456.453</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="正则断言"><a class="header-anchor" href="#正则断言">#</a> 正则断言</h2><p>语法如下：</p><p><code>String(Number).replace(/(\\d)(?=(\\d{3})+$)/g, &quot;$1,&quot;);</code> 举例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123456789</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d)(?=(\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;$1,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// or</span>\n\n<span class="token string">&#39;123456789&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B(?=(\\d{3})+(?!\\d))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>\n\n\n<span class="token comment">//结果是：123,456,789</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果为小数则为： <code>&#39;1234567890030.7890&#39;.replace(/(?=\\B(?:\\d{3})+\\b)(\\d{3}(\\.\\d+$)?)/g,&#39;,$1&#39;);</code> // 整数小数都兼容 方法二：使用<code>toLocaleString()</code>方法 语法如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">&#39;en-US&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//举例：</span>\n\n<span class="token punctuation">(</span><span class="token number">123456789</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">&#39;en-US&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//结果是：123,456,789</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>对于中文场景下，<code>toLocaleString(&#39;en-US&#39;)</code>中的<code>&#39;en-US&#39;</code>理论上是可以缺省的，也就是直接<code>(123456789).toLocaleString()</code>也是可以得到<code>123,456,789</code>。但是如果你的产品可能海外用户使用，则保险起见，还是保留<code>&#39;en-US&#39;</code>。</p><h2 id="jsonp转化json实战遇到的问题"><a class="header-anchor" href="#jsonp转化json实战遇到的问题">#</a> jsonp转化json实战遇到的问题</h2><p>qq音乐返回的jsonp数据，但是我们需要json数据，需要正则匹配</p><p><code>jsonp:&quot;MusicJsonCallback({&quot;retcode&quot;:0,&quot;code&quot;:0,&quot;subcode&quot;:0,&quot;lyric&quot;:&quot;W3RpOua8lOWRmF0KW2FyO……</code></p><p>我们需要大括号的内容，所以</p><p>// 其实我们不需要这个jsonp数据，这里我们做处理</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ret <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> reg <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\w+\\(({[^()]+})\\)$</span><span class="token regex-delimiter">/</span></span>\n  <span class="token keyword">var</span> matches <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>matches<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    ret <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="正则贪婪"><a class="header-anchor" href="#正则贪婪">#</a> 正则贪婪</h2><ul><li>*? 重复任意次，但尽可能少重复</li><li>? 重复1次或更多次，但尽可能少重复</li><li>?? 重复0次或1次，但尽可能少重复</li><li>{n,m}? 重复n到m次，但尽可能少重复</li><li>{n,}? 重复n次以上，但尽可能少重复</li></ul><h2 id="今日图-全栈工程师的日常"><a class="header-anchor" href="#今日图-全栈工程师的日常">#</a> 今日图 - 全栈工程师的日常</h2><p><img src="'+p+'" alt="16a763d28be4b200.gif"></p>',52),c={},o=(0,a(3744).Z)(c,[["render",function(n,s){return t}]])}}]);