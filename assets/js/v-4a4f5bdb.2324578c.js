"use strict";(self.webpackChunkweiboqianduan=self.webpackChunkweiboqianduan||[]).push([[7219],{7657:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-4a4f5bdb",path:"/JS/socket/js%E5%AE%9E%E7%8E%B0webSocket%E5%AE%A2%E6%88%B7%E7%AB%AF.html",title:"js实现webSocket客户端",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"websocket",slug:"websocket",children:[]},{level:2,title:"简单示例",slug:"简单示例",children:[{level:3,title:"node服务端",slug:"node服务端",children:[]}]},{level:2,title:"api",slug:"api",children:[]},{level:2,title:"相关推荐",slug:"相关推荐",children:[]},{level:2,title:"今日图",slug:"今日图",children:[]}],filePathRelative:"JS/socket/js实现webSocket客户端.md",git:{updatedTime:1627026748e3}}},801:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var e=a(6252);const t=a.p+"assets/img/16b1c4ddef5d24dc.43e58948.gif",p=(0,e.uE)('<h1 id="js实现websocket客户端" tabindex="-1"><a class="header-anchor" href="#js实现websocket客户端" aria-hidden="true">#</a> js实现webSocket客户端</h1><h2 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> websocket</h2><p>由于http请求只能由客户端发起，所有当服务器资源有变化时，客户端只能通过轮询的方式。非常浪费资源。 websocket的特点：</p><ul><li>服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种</li><li>建立在 <code>TCP</code> 协议之上，服务器端的实现比较容易</li><li>可以发送文本，也可以发送二进制数据</li><li>没有同源限制，客户端可以与任意服务器通信</li><li>协议标识符是<code>ws</code>（如果加密，则为<code>wss</code>），服务器网址就是 URL。如<code>ws:localhost:8080/msg</code></li></ul><h2 id="简单示例" tabindex="-1"><a class="header-anchor" href="#简单示例" aria-hidden="true">#</a> 简单示例</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;ws://localhost:8080/msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Connection open ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Hello WebSockets!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Received Message: &quot;</span><span class="token punctuation">,</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Connection closed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="node服务端" tabindex="-1"><a class="header-anchor" href="#node服务端" aria-hidden="true">#</a> node服务端</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ws&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> WebSocketServer <span class="token operator">=</span> WebSocket<span class="token punctuation">.</span>Server\n<span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nwss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// message 接收到的参数</span>\n    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;已接受到&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> api</h2><ol><li>websocket构造函数</li></ol><p>用于创建一个<code>webSocket</code>实例，执行后，客户端就会与服务端连接</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;ws://localhost:8080/msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>webSocket.readyState</li></ol><p><code>readyState</code>属性返回实例对象的当前状态，共有四种。</p><ul><li>CONNECTING：值为0，表示正在连接。</li><li>OPEN：值为1，表示连接成功，可以通信了。</li><li>CLOSING：值为2，表示连接正在关闭。</li><li>CLOSED：值为3，表示连接已经关闭，或者打开连接失败</li></ul><p>例如：<code>if(ws.readyState ==WebSocket.CONNECTING){}</code></p><ol start="3"><li>其他属性</li></ol>',17),o={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket"),l=(0,e.uE)('<ul><li>WebSocket.binaryType</li><li>WebSocket.onerror</li><li>WebSocket.onclose</li><li>WebSocket.onmessage</li></ul><p><strong>方法</strong></p><ul><li>WebSocket.close([code[, reason]]) 关闭当前链接</li><li>WebSocket.send(data) 向服务器发送数据</li></ul><h2 id="相关推荐" tabindex="-1"><a class="header-anchor" href="#相关推荐" aria-hidden="true">#</a> 相关推荐</h2>',4),i=(0,e.Uk)("SSE服务端推送"),u=(0,e._)("h2",{id:"今日图",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#今日图","aria-hidden":"true"},"#"),(0,e.Uk)(" 今日图")],-1),r=(0,e._)("p",null,[(0,e._)("img",{src:t,alt:"16b1c4ddef5d24dc.gif"})],-1),k={},d=(0,a(3744).Z)(k,[["render",function(n,s){const a=(0,e.up)("OutboundLink"),t=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[(0,e._)("a",o,[c,(0,e.Wm)(a)])]),l,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(t,{to:"/JS/socket/SSE%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8E%A8%E9%80%81.html"},{default:(0,e.w5)((()=>[i])),_:1})])]),u,r],64)}]])}}]);