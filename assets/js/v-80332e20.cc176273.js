"use strict";(self.webpackChunkweiboqianduan=self.webpackChunkweiboqianduan||[]).push([[4018],{8956:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-80332e20",path:"/Utils/Node/npm%E5%8F%91%E5%B8%83%E5%8C%85%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E5%92%8C%E6%B5%81%E7%A8%8B.html",title:"npm发布包一些注意事项和流程",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"初始化",slug:"初始化",children:[]},{level:2,title:"新建入口文件 index.js",slug:"新建入口文件-index-js",children:[]},{level:2,title:"发布",slug:"发布",children:[]},{level:2,title:"更新发布",slug:"更新发布",children:[{level:3,title:"1. version",slug:"_1-version",children:[]},{level:3,title:"2. npm version",slug:"_2-npm-version",children:[]},{level:3,title:"3. major | minor | patch 等",slug:"_3-major-minor-patch-等",children:[]}]},{level:2,title:"如果发布的有es6代码",slug:"如果发布的有es6代码",children:[]},{level:2,title:"错误",slug:"错误",children:[]},{level:2,title:"npm包来制作命令行工具的原理",slug:"npm包来制作命令行工具的原理",children:[{level:3,title:"Unix-like 平台",slug:"unix-like-平台",children:[]},{level:3,title:"Windows 平台",slug:"windows-平台",children:[]},{level:3,title:"本地开发 cli 测试",slug:"本地开发-cli-测试",children:[]}]},{level:2,title:"引用",slug:"引用",children:[]},{level:2,title:"今日图 - 猜猜这个是谁？",slug:"今日图-猜猜这个是谁",children:[]}],filePathRelative:"Utils/Node/npm发布包一些注意事项和流程.md",git:{updatedTime:1627026748e3}}},349:(n,s,a)=>{a.r(s),a.d(s,{default:()=>g});var e=a(6252);const p=a.p+"assets/img/e5f879a92a3c190ff5e29dd7146f4611.864f1c2d.gif",o=(0,e._)("h1",{id:"npm发布包一些注意事项和流程"},[(0,e._)("a",{class:"header-anchor",href:"#npm发布包一些注意事项和流程"},"#"),(0,e.Uk)(" npm发布包一些注意事项和流程")],-1),t=(0,e._)("h2",{id:"初始化"},[(0,e._)("a",{class:"header-anchor",href:"#初始化"},"#"),(0,e.Uk)(" 初始化")],-1),c=(0,e.Uk)("在"),l={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("https://www.npmjs.com/"),i=(0,e.Uk)("这里注册登录， 起一个名字，比如http-auth-zfb,首先查询是否已存在"),u=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> http-auth-zfb\n<span class="token builtin class-name">cd</span> http-auth-zfb\n<span class="token function">npm</span> init -y\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="新建入口文件-index-js"><a class="header-anchor" href="#新建入口文件-index-js">#</a> 新建入口文件 index.js</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//index.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./lib/index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>要发布的文件放到lib文件夹下</p><h2 id="发布"><a class="header-anchor" href="#发布">#</a> 发布</h2><p><code>npm login</code>登录会填写你在<code>npmjs.com</code>注册的用户名密码邮箱等信息。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> login\n<span class="token function">npm</span> publish\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="更新发布"><a class="header-anchor" href="#更新发布">#</a> 更新发布</h2><p>只需要更改版本号然后<code>npm publish</code> ,下面介绍几个自动更新版本号的</p><h3 id="_1-version"><a class="header-anchor" href="#_1-version">#</a> 1. version</h3><p>每个npm包都有一个 <code>package.json</code>，如果要发布包的话，package.json里面的version字段就是决定发包的版本号了。</p><p>version字段是这样一个结构： ‘0.0.1’，是有三位的版本号。分别是对应的version里面的：<code>major</code>, <code>minor</code>, <code>patch</code>。 也就是说当发布大版本的时候会升级为 <code>1.0.0</code>，小版本是<code>0.1.0</code>，一些小修复是<code>0.0.2</code></p><h3 id="_2-npm-version"><a class="header-anchor" href="#_2-npm-version">#</a> 2. npm version</h3><p>为了方便用户更改版本号，npm有<code>npm version</code>这个命令来自动更改版本号，同时帮忙commit. 比如说 当前版本是 <code>1.1.1</code>，当执行 <code>npm version patch -m &#39;[patch]&#39;</code>的时候，会自动把package.json里面的<code>version</code>改为<code>1.1.2</code>，同时git会多一个commit log <code>[patch]</code>,这次改动便是更改package.json。</p><p>如果执行了prepatch，版本号会从<code>1.1.1</code>变成 <code>1.1.2-0</code></p><ul><li>我们称版本号的三位分别是 <code>大号.中号.小号-预发布号</code></li></ul><h3 id="_3-major-minor-patch-等"><a class="header-anchor" href="#_3-major-minor-patch-等">#</a> 3. major | minor | patch 等</h3><table><thead><tr><th>npm version</th><th style="text-align:right;">功能</th></tr></thead><tbody><tr><td>major</td><td style="text-align:right;">- 如果没有预发布号，则直接升级一位大号，其他位都置为0 - 如果有预发布号： -- 中号和小号都为0，则不升级大号，而将预发布号删掉。即2.0.0-1变成2.0.0，这就是预发布的作用 -- 如果中号和小号有任意一个不是0，那边会升级一位大号，其他位都置为0，清空预发布号。即 2.0.1-0变成3.0.0</td></tr><tr><td>minor</td><td style="text-align:right;">- 如果没有预发布号，则升级一位中号，大号不动，小号置为空 - 如果有预发布号: -- 如果小号为0，则不升级中号，将预发布号去掉 -- 如果小号不为0，同理没有预发布号</td></tr><tr><td>patch</td><td style="text-align:right;">- 如果没有预发布号：直接升级小号，去掉预发布号 - 如果有预发布号：去掉预发布号，其他不动</td></tr><tr><td>premajor</td><td style="text-align:right;">- 直接升级大号，中号和小号置为0，增加预发布号为0</td></tr><tr><td>preminor</td><td style="text-align:right;">- 直接升级中号，小号置为0，增加预发布号为0</td></tr><tr><td>prepatch</td><td style="text-align:right;">- 直接升级小号，增加预发布号为0</td></tr><tr><td>prerelease</td><td style="text-align:right;">- 如果没有预发布号：增加小号，增加预发布号为0 - 如果有预发布号，则升级预发布</td></tr></tbody></table><p><a href="">前端工具</a></p><h2 id="如果发布的有es6代码"><a class="header-anchor" href="#如果发布的有es6代码">#</a> 如果发布的有es6代码</h2><p>新建<code>src</code>目录，把原始文件（es6代码），放入<code>src</code>,需要<code>babael</code>转化</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;babel src --out-dir lib&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n<span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;babel-cli&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^6.26.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;babel-plugin-transform-runtime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^6.23.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;babel-preset-es2015&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^6.24.1&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;babel-preset-stage-3&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^6.24.1&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;transform-runtime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^0.0.0&quot;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>发布前，执行<code>npm run build</code>转化后的代码会在lib下面，更改版本号，在执行<code>npm publish</code></p><h2 id="错误"><a class="header-anchor" href="#错误">#</a> 错误</h2><p><code>npm ERR! publish Failed PUT 401</code> 解决过程：</p><ol><li><p>检查仓库是否被设成了淘宝镜像库 <code>npm config get registry</code></p></li><li><p>如是，则设回原仓库 <code>npm config set registry=http://registry.npmjs.org</code></p></li><li><p>登录账号（如未登录） <code>npm login</code> 或者添加用户 <code>npm adduser</code></p></li><li><p>再次发布 <code>npm publish</code></p></li><li><p>如发布成功，则再次将仓库地址设为淘宝镜像地址 <code>npm config set registry=https://registry.npm.taobao.org/</code></p></li></ol><h2 id="npm包来制作命令行工具的原理"><a class="header-anchor" href="#npm包来制作命令行工具的原理">#</a> npm包来制作命令行工具的原理</h2><blockquote><p>用过构建工具的亲们知道，通常通过全局安装一个 xxx-cli 的 npm 包， 就能在命令行用命令进行构建。那么这个 npm 包如何变成一个可执行的命令呢？</p></blockquote><p>1.使用 <code>npm init</code> 初始化一个项目目录 <code>my-cli</code>。</p><p>2.在 <code>package.json</code> 中添加或者编辑 <code>bin</code> 字段：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n  &quot;name&quot;: &quot;my-cli&quot;,\n  ...,\n  &quot;bin&quot;: {\n    &quot;command-name&quot;: &quot;jsfile&quot; // path of jsfile relative to package.json\n  },\n  ...\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>commandName</code> 就是命令的名字，<code>jsfile</code> 就是当用户键入命令时的处理程序。</p><p>3.代码开发。必须在 <code>jsfile</code> 文件的第一行写这行命令 <code>#!/usr/bin/env node</code>，譬如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env node</span>\n<span class="token keyword">const</span> program <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> packageJson <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../package&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> defaultJsProcessors <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&#39;react&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> defaultStyleProcessors <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&#39;sasslike&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> defaultWebpackVersion <span class="token operator">=</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">parseListArgv</span><span class="token punctuation">(</span> <span class="token parameter">val</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span> val <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span> <span class="token string">&#39;,&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nprogram\n  <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span> packageJson<span class="token punctuation">.</span>version<span class="token punctuation">,</span> <span class="token string">&#39;-v, --version&#39;</span> <span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span> <span class="token string">&#39;-u, --use-version &lt;version-number&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Webpack version&#39;</span> <span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span> <span class="token string">&#39;-j, --js-processors &lt;processors&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Specify javascript processors&#39;</span><span class="token punctuation">,</span> parseListArgv <span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span> <span class="token string">&#39;-s, --style-processors &lt;processors&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Specify style(css,image,fonts) processors&#39;</span><span class="token punctuation">,</span> parseListArgv <span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span> <span class="token string">&#39;--no-install&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Do not install devDependncies package&#39;</span> <span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> process<span class="token punctuation">.</span>argv <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token keyword">let</span> jsProcessors <span class="token operator">=</span> program<span class="token punctuation">.</span>jsProcessors <span class="token operator">||</span> defaultJsProcessors<span class="token punctuation">;</span>\n<span class="token keyword">let</span> styleProcessors <span class="token operator">=</span> program<span class="token punctuation">.</span>styleProcessors <span class="token operator">||</span> defaultStyleProcessors<span class="token punctuation">;</span>\n<span class="token keyword">let</span> webpackVersion <span class="token operator">=</span> program<span class="token punctuation">.</span>useVersion <span class="token operator">||</span> defaultWebpackVersion<span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span> webpackVersion<span class="token operator">==</span><span class="token string">&#39;4&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// code</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">// code</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>4.当发布成功之后，全局安装刚刚发布的包 <code>npm install -g my-cli</code>，安装完以后就可以在命令行使用步骤2中的命令了 <code>$ command-name</code></p><h3 id="unix-like-平台"><a class="header-anchor" href="#unix-like-平台">#</a> Unix-like 平台</h3><p>当全局安装 <code>npm</code> 包的时候，<code>npm</code> 会把 <code>package.json</code> 中 <code>bin</code> 配置的 <code>command-name</code> 添加到系统 <code>$PATH</code> 中去。拿 <code>macOS</code> 举例， <code>npm</code> 会在 <code>/usr/local/bin</code> 下创建一个以 <code>command-name</code> 为名字的软链接，指向全局安装下来的 <code>my-cli</code> 包下面的 <code>js:jsfile</code>。 （<code>/usr/local/bin</code> 是在 <code>$PATH</code> 中的）</p><p>在命令行键入<code> command-name</code> 相当于执行了文本文件 <code>jsfile</code>。</p><p>在执行的时候碰到第一行 <code>#!/usr/bin/env node</code>，这是一个 <code>shebang</code> 行。这行告诉系统使用 <code>node</code> 去执行当前文件。 （<code>shebang</code> 只有在<code>Unix-like</code>平台才有） 执行 <code>js</code> 文件。这里有一个问题：<code>#!</code> 并不是一个符合 <code>js</code> 语法的语句，理论上直接执行是会有 <code>syntax error</code> 的。但是 <code>node</code> 对 <code>shebang</code> 行做了例外处理，所以用 <code>node</code> 执行带 <code>shebang</code> 行的 <code>js</code> 文件是没有问题的。</p><h3 id="windows-平台"><a class="header-anchor" href="#windows-平台">#</a> Windows 平台</h3><p>全局安装会把包安装到 <code>C:\\Users\\username\\AppData\\Roaming\\npm\\node_modules</code>下面， 然后在<code> C:\\Users\\username\\AppData\\Roaming\\npm</code> 生成一个 以 <code>command-name</code> 为名字的 <code>cmd</code> 文件：<code>command-name.cmd</code>。<code>（C:\\Users\\username\\AppData\\Roaming\\npm</code> 在安装 <code>npm</code> 时被加入到 <code>%PATH% </code>中） 在 <code>Windows</code> 平台运行 <code>cmd</code> 文件是不需要后缀名的，所以当在命令行键入 <code>command-name </code> 相当于执行 <code>C:\\Users\\username\\AppData\\Roaming\\npm\\command-name.cmd</code>。 为什么有这个 <code>cmd</code> 文件，因为 <code>windows</code> 平台没有 <code>shebang</code>，那么 <code>command-name.cmd</code> 就模拟了 <code>#!/usr/bin/env node</code> 的功能，调用 <code>C:\\Users\\username\\AppData\\Roaming\\npm\\node_modules\\my-cli\\ jsfile</code></p><h3 id="本地开发-cli-测试"><a class="header-anchor" href="#本地开发-cli-测试">#</a> 本地开发 cli 测试</h3><p>在没有发布到 <code>npm</code> 平台，我们在 <code>package.json</code> 可以添加</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n   <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;command-name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jsfile&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>安装一来后然后执行 <code>npm init</code> ,即可本地使用这个命令</p><h2 id="引用"><a class="header-anchor" href="#引用">#</a> 引用</h2>',46),d={href:"https://segmentfault.com/a/1190000015218126",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("npm包来制作命令行工具的原理"),k=(0,e._)("h2",{id:"今日图-猜猜这个是谁"},[(0,e._)("a",{class:"header-anchor",href:"#今日图-猜猜这个是谁"},"#"),(0,e.Uk)(" 今日图 - 猜猜这个是谁？")],-1),b=(0,e._)("p",null,[(0,e._)("img",{src:p,alt:"e5f879a92a3c190ff5e29dd7146f4611.gif"})],-1),h={},g=(0,a(3744).Z)(h,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[o,t,(0,e._)("p",null,[c,(0,e._)("a",l,[r,(0,e.Wm)(a)]),i]),u,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",d,[m,(0,e.Wm)(a)])])]),k,b],64)}]])}}]);