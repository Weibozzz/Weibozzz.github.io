"use strict";(self.webpackChunkweiboqianduan=self.webpackChunkweiboqianduan||[]).push([[7015],{3155:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-a01d26e8",path:"/JS/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D.html",title:"深浅拷贝",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"对象的浅拷贝",slug:"对象的浅拷贝",children:[{level:3,title:"浅拷贝实现",slug:"浅拷贝实现",children:[]},{level:3,title:"正则对象拷贝",slug:"正则对象拷贝",children:[]},{level:3,title:"其他对象拷贝",slug:"其他对象拷贝",children:[]},{level:3,title:"函数拷贝",slug:"函数拷贝",children:[]}]},{level:2,title:"深拷贝的实现",slug:"深拷贝的实现",children:[]},{level:2,title:"循环引用拷贝",slug:"循环引用拷贝",children:[]},{level:2,title:"性能问题",slug:"性能问题",children:[]},{level:2,title:"总结",slug:"总结",children:[]},{level:2,title:"参考",slug:"参考",children:[]},{level:2,title:"今日图 - 灵魂一米八",slug:"今日图-灵魂一米八",children:[]}],filePathRelative:"JS/深浅拷贝.md",git:{updatedTime:1626767622e3}}},9053:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var p=a(6252);const e=a.p+"assets/img/16b4040ec7c834f6.fc7728b0.gif",t=(0,p.uE)('<h1 id="深浅拷贝" tabindex="-1"><a class="header-anchor" href="#深浅拷贝" aria-hidden="true">#</a> 深浅拷贝</h1><h2 id="对象的浅拷贝" tabindex="-1"><a class="header-anchor" href="#对象的浅拷贝" aria-hidden="true">#</a> 对象的浅拷贝</h2><p>如果是数组，我们可以利用数组的一些方法比如：<code>slice</code>、<code>concat</code> 返回一个新数组的特性来实现拷贝。</p><p>比如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;old&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> new_arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nnew_arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;new&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [&quot;old&quot;, 1, true, null, undefined]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_arr<span class="token punctuation">)</span> <span class="token comment">// [&quot;new&quot;, 1, true, null, undefined]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>用 <code>slice</code> 可以这样做：</p><p><code>var new_arr = arr.slice();</code></p><p>但是如果数组嵌套了对象或者数组的话，比如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">old</span><span class="token operator">:</span> <span class="token string">&#39;old&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;old&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> new_arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\narr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>old <span class="token operator">=</span> <span class="token string">&#39;new&#39;</span><span class="token punctuation">;</span>\narr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;new&#39;</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [{old: &#39;new&#39;}, [&#39;new&#39;]]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_arr<span class="token punctuation">)</span> <span class="token comment">// [{old: &#39;new&#39;}, [&#39;new&#39;]]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>我们会发现，无论是新数组还是旧数组都发生了变化，也就是说使用 concat 方法，克隆的并不彻底。 如果数组元素是基本类型，就会拷贝一份，互不影响，而如果是对象或者数组，就会只拷贝对象和数组的引用，这样我们无论在新旧数组进行了修改，两者都会发生变化。 我们把这种复制引用的拷贝方法称之为浅拷贝，与之对应的就是深拷贝，深拷贝就是指完全的拷贝一个对象，即使嵌套了对象，两者也相互分离，修改一个对象的属性，也不会影响另一个。 所以我们可以看出使用 <code>concat</code> 和 <code>slice</code> 是一种浅拷贝。</p><p>另外对象 <code>Object.assign({})</code> ，扩展运算符也是浅拷贝</p><h3 id="浅拷贝实现" tabindex="-1"><a class="header-anchor" href="#浅拷贝实现" aria-hidden="true">#</a> 浅拷贝实现</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">shallowCopy</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 只拷贝对象</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token comment">// 根据obj的类型判断是新建一个数组还是对象</span>\n    <span class="token keyword">var</span> newObj <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">// 遍历obj，并且判断是obj的属性才拷贝</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="正则对象拷贝" tabindex="-1"><a class="header-anchor" href="#正则对象拷贝" aria-hidden="true">#</a> 正则对象拷贝</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token keyword">function</span> <span class="token function">isRegExp</span> <span class="token punctuation">(</span><span class="token parameter">pattern</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> flags <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n  flags <span class="token operator">+=</span> pattern<span class="token punctuation">.</span>global <span class="token operator">?</span> <span class="token string">&#39;g&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n  flags <span class="token operator">+=</span> pattern<span class="token punctuation">.</span>ignoreCase <span class="token operator">?</span> <span class="token string">&#39;i&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n  flags <span class="token operator">+=</span> pattern<span class="token punctuation">.</span>multiline <span class="token operator">?</span> <span class="token string">&#39;m&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>source<span class="token punctuation">,</span> flags<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;/111/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> newReg<span class="token operator">=</span><span class="token function">isRegExp</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="其他对象拷贝" tabindex="-1"><a class="header-anchor" href="#其他对象拷贝" aria-hidden="true">#</a> 其他对象拷贝</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getRawType</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n <span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token function">getRawType</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    \n    <span class="token keyword">switch</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token string">&#39;Date&#39;</span><span class="token operator">:</span>\n        <span class="token keyword">case</span> <span class="token string">&#39;RegExp&#39;</span><span class="token operator">:</span> \n        <span class="token keyword">case</span> <span class="token string">&#39;Error&#39;</span><span class="token operator">:</span> value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> value\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="函数拷贝" tabindex="-1"><a class="header-anchor" href="#函数拷贝" aria-hidden="true">#</a> 函数拷贝</h3><p>复制函数似乎没有太大意义，<code>JS</code> 里函数的身份比较特殊，由于闭包的关系，每个函数在声明时处于独立的执行环境。所以你简单复制一个函数，比如 <code>funcA = new Function(funcB.toString)</code>，无法进入原先的执行环境，运行结果肯定是不同的。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">fn</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">eval(&#39;(&#39; + fn.toString() + &#39;)&#39;);</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="深拷贝的实现" tabindex="-1"><a class="header-anchor" href="#深拷贝的实现" aria-hidden="true">#</a> 深拷贝的实现</h2><p>第一种就是 <code>JSON.stringify</code> 这个对于，函数就不适用了。</p><p>那如何实现一个深拷贝呢？说起来也好简单，我们在拷贝的时候判断一下属性值的类型，如果是对象，我们递归调用深拷贝函数不就好了~</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">deepCopy</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> newObj <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="循环引用拷贝" tabindex="-1"><a class="header-anchor" href="#循环引用拷贝" aria-hidden="true">#</a> 循环引用拷贝</h2><p>循环引用。</p><p>例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> man <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;aepkill&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;male&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nman<span class="token punctuation">[</span><span class="token string">&#39;deefRef&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> man<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>此时如果调用刚才的<code>deepCopy</code>函数的话，会陷入一个循环的递归过程，从而导致爆栈：</p><p>解决这个问题也非常简单，只需要判断一个对象的字段是否引用了这个对象或这个对象的任意父级即可，修改一下代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">deepCopy</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> newObj <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token keyword">var</span> _parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>\n\t   _parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>\n            <span class="token comment">// 该字段有父级则需要追溯该字段的父级</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span>_parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 如果该字段引用了它的父级则为循环引用</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>_parent<span class="token punctuation">.</span>originalParent <span class="token operator">===</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token comment">// 循环引用直接返回同级的新对象</span>\n                    <span class="token keyword">return</span> _parent<span class="token punctuation">.</span>currentParent<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                _parent <span class="token operator">=</span> _parent<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                        <span class="token literal-property property">originalParent</span><span class="token operator">:</span> obj<span class="token punctuation">,</span>\n                        <span class="token literal-property property">currentParent</span><span class="token operator">:</span> newObj<span class="token punctuation">,</span>\n                        <span class="token literal-property property">parent</span><span class="token operator">:</span> _parent\n                    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="性能问题" tabindex="-1"><a class="header-anchor" href="#性能问题" aria-hidden="true">#</a> 性能问题</h2><p>尽管使用深拷贝会完全的克隆一个新对象，不会产生副作用，但是深拷贝因为使用递归，性能会不如浅拷贝，在开发中，还是要根据实际情况进行选择。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>',34),o=(0,p.Uk)("另外在掘金看到有这么一篇总结的不错，推荐一下 "),c={href:"https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("如何写出一个惊艳面试官的深拷贝?"),r=(0,p.Uk)(" 源码"),u={href:"https://github.com/ConardLi/ConardLi.github.io/blob/master/demo/deepClone/src/clone_6.js",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("点这里"),k=(0,p.uE)('<h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><ul><li>https://github.com/mqyqingfeng/Blog/issues/32</li><li>https://blog.csdn.net/liwusen/article/details/78759373</li><li>https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp</li><li>https://segmentfault.com/q/1010000019806573?_ea=15209539</li><li>https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1</li></ul><h2 id="今日图-灵魂一米八" tabindex="-1"><a class="header-anchor" href="#今日图-灵魂一米八" aria-hidden="true">#</a> 今日图 - 灵魂一米八</h2><p><img src="'+e+'" alt="16b4040ec7c834f6.gif"></p>',4),b={},d=(0,a(3744).Z)(b,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[o,(0,p._)("a",c,[l,(0,p.Wm)(a)]),r,(0,p._)("a",u,[i,(0,p.Wm)(a)])]),k],64)}]])}}]);